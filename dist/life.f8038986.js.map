{"version":3,"sources":["globaldefaults.js","basicfunctions.js","homecalcs.js","kiddos.js","person.js","retirement.js","taxes.js","life.js"],"names":["rateDefaults","_growth","_inflation","_realEstateTax","_mortgageYears","_mortgageInterest","_homeValueGrowth","growth","console","log","inflation","realEstateTax","mortgageYears","mortgageInterest","homeValueGrowth","newGrowth","newInflation","newRealEstateTax","newMortgageYears","newMortgageInterest","newHomeValueGrowth","insertDefaultValues","parseFloat","window","sessionStorage","getItem","parseInt","setItem","addEventListener","defaultCounter","module","exports","require","growAgainstInflation","start","years","grow","newAmount","basicFunctions","homeCreator","_number","_yearPurchased","_yearSold","_originalValue","_growthRate","_mortgageInterestRate","_realEstateTaxRate","_downPayment","yearlyValues","seekingYear","monthlyPayment","annualCost","remainingBalance","equity","homeValueAtCertainYear","number","newNumber","yearPurchased","newYear","yearSold","originalValue","newValue","growthRate","mortgageInterestRate","newRate","realEstateTaxRate","newTaxRate","downPayment","newDP","newYears","mortgagePayment","_mortgagePayment","houseProgression","housePurchaseCashFlow","insertHousingValues","numberOfHouses","yearsPurchased","originalValues","fullTransfer","houseArray","JSON","parse","i","undefined","numberOfHouses2","yearsPurchased2","originalValues2","fullTransfer2","returnAnnualHousingCost","year","annualCostValues","forEach","home","push","reduce","previousValue","currentValue","findHousePurchaseYearCashFlow","propValue","valueToReturn","length","housingExports","numberOfKids2","yearsBorn2","requireDayCare2","privateCollege2","monthlyCost2","dayCareMonthly2","privateCollegeAnnual2","publicCollegeAnnual2","insertKidValues","kidArray","numberOfKids","yearsBorn","names","requireDayCare","privateCollege","monthlyCost","dayCareMonthly","privateCollegeAnnual","publicCollegeAnnual","taxCredit","kidCreator","_name","_yearBorn","_requiresDayCare","_privateCollege","yearlyCost","cost","kiddos","returnAnnualKidCost","kid","Date","getSeconds","getMilliseconds","personCreator","_age","_startingSalary","_salaryGrowth","_salaryBumps","_salaryPlateau","_retirementYear","_preTaxContribution","_companyMatch","yearlySalary","newSalary","y","getFullYear","preTaxContribution","relevantSalaryBumps","filter","bump","name","newName","age","rewRate","companyMatch","householdMembers","insertPersonValues","numberOfPeople","personArray","startingSalary","salaryGrowth","salaryPlateau","retirementYears","preTax","salaryBumps","bumpArray","personCounter","names2","age2","startingSalary2","salaryGrowth2","retirementYears2","salaryBumps2","salaryPlateau2","preTax2","companyMatch2","returnAnnualSalary","annualSalaryValues","person","annualSalary","personExports","personImports","numberOfAccounts","regNames","rothNames","f401kNames","regOwners","rothOwners","f401kOwners","regStartingValues","rothStartingValues","f401kStartingValues","insertAccountValues","accountArray","findElementIndex","arr","rmdFactor","factorIndex","factors","factor","InvestmentAccount","owner","_currentValue","_owner","_ownerIndex","newcurrentValue","_type","newtype","newgrowth","newOwner","newowner","RegInvestment","startingValue","amount","returnAmount","decAmount","RothIRA","ownerAge","RMD","F401k","salary","valueIncrease","names1","owners1","startingValues1","investmentAccounts","owners2","startingValues2","rothAccounts","names3","owners3","startingValues3","f01kAccounts","retirementExports","taxBracketsSingle","taxBracketsJoint","standardDeduction","calculateNetIncome","numPeople","tax","deductedSalary","relevantTaxBrackets","bracket","calculateAddtlNetIncome","previousSalary","origNet","newNet","netNet","taxExports","housingImports","retirementImports","f401kAccounts","taxImports","calculateAddlNetIncome","yearlyHouseSalary","totalSalary","netSalary","monthlyDisc","monthlyGroc","monthlyRetir","regSpending","disc","groc","retir","netAfterCost","income","kidCost","regCost","houseCost","net","posCashFlowPrecedence","negCashFlowPrecedence","findAccountOwner","posCashFlowAccountList","negCashFlowAccountList","balanceYearOfCashFlow","addMoney","withdrawMoney","processRMDs","getRMD","growAccounts","increase401ks","increaseValue","calcCashFlowUpToYear","testYear","netTest","nets","totalNet","income1","kidCost1","regCost1","houseCost1","housePurchaseCashFlow1"],"mappings":"ACAA,ADAA,AEAA,ACAA,AIAA,AHAA,AEAA,IHAIsG,AIAEhE,aJAN,CIAoB,GAAGN,OAAO,CAAC,qBAAD,CAA9B;ANCA,ADAA,AEAA,ACAA,ACAA,AEAA,IHAIuE,UAAU,GAAC,EAAf;AFCA,ADAA,AEAA,ACAA,AIDA,AHCA,AEAA,ILAMvG,ACAAA,ACAFwG,AIDEvE,AHCAK,AEAAsM,YLAY,ACAA,EEAE,CHAC5M,ACAAA,ACAF,ECAIA,AEAA,CHAH,EAApB,AID0B,ADCA,CAAC,CLAC,ACAA,AIAA,CLAC,ACAA,AKDAM,ADCF,CFAG,CAAC,AEAD,CAAH,CAAD,EAAO,CAAC,EAAD,EAAK,GCDK,CAACL,ADCX,CAAP,EAAmB,CAAC,ELAlB,ACAA,CDA5B,ACAA,AIA6C,CFAf,CHE9B,ACDA,AEDA,AEAmD,KAAN,CAAnB,EAAgC,CAAC,ECD3D,CDC0D,EAAM,KAAN,CAAhC,EAA6C,CAAC,GAAD,EAAK,MAAL,CAA7C,EAA0D,CAAC,GAAD,EAAM,MAAN,CAA1D,EAAyE,CAAC,GAAD,EAAM,MAAN,CAAzE,EAAuF,CAAC,GAAD,EAAM,OAAN,CAAvF,CAA1B;ALGA,ADFA,AGAA,AGAA,INAMjC,AGAFyG,AGAEoI,YNAY,GAAG,AGAF,CGAG,EHAF,CGAK,CHAzB,AGA0B,CAAC,CAAD,EAAG,CAAH,CAAD,EAAO,CAAC,EAAD,EAAK,KAAL,CAAP,EAAoB,CAAC,GAAD,EAAM,KAAN,CAApB,EAAiC,CAAC,GAAD,EAAM,MAAN,CAAjC,EAA+C,CAAC,GAAD,EAAK,MAAL,CAA/C,EAA4D,CAAC,GAAD,EAAM,MAAN,CAA5D,EAA2E,CAAC,GAAD,EAAM,MAAN,CAA3E,EAAyF,CAAC,GAAD,EAAM,OAAN,CAAzF,CAAzB,EACA;ALEA,ADFI,AGAJ,AIDA,AHAA,IDCInI,AIDEiJ,AHAA1N,YDCN,EIDoB,GAAGD,GHAG,GAAGM,CGAC,CAAC,YHAY,CAACL,GGAd,CAA9B,gBHAA;AHIA,ADFIhC,AEDJ,ACCA,ACDAO,AECA,ENAIP,EEDEqC,ACCFqE,AGAEmI,GFDC,CAACrO,CJCG,EAAE,AIDb,GJDqB,IECD,CCCpB,EDDuBuB,AICA,GAAG,IJDI,CAAC,AIC/B,EAEA,mBJH8B,CAA9B,AEA4C,IAAIoG,IAAJ,GAAWC,UAAX,EAA5C,kBAA2E,IAAID,IAAJ,GAAWE,eAAX,EAA3E,IAEA;AHEA,ADFI,AGAJ,AIFA,AHGA,IDDI1B,AIFEpB,qBJEN,EIF6B,GAAGmK,cAAc,CAACnK,uBAA/C;APGItF,AEFJ,ACEA,AIFA,AHGA,AEAA,ENDIA,EEFE+B,ACEF4E,AIFEZ,ADGA8I,QNDQ,EAAE,GAJK,KMKG,EJHE,ACE1B,CGC2B,EJHEzM,MKAM,CDG7ByM,ECHgCY,KLAK,CAAC1N,QKAQ,CAACgE,CDG1B,CAAC+I,SJH5B,AIG2B,EJD3B,AICuClB,MAAZ,EAAuB,QCHlD;APGI,AEAJ,AICI,MAAImB,GAAG,GAAC,CAAR,CAD8C,CAE9C;ALAJ,ADDI9O,AEAJ,ACAA,AIHA,AHGA,EJAIA,ECCE8B,AMJAiG,AHGAK,KDAGzB,OHAS,CIAC,CJAC,EIAE,CJND,EOGI,CNIC,AED1B,EIH4B9E,CNIC,AEDF,ECArBuG,IGH6B,CAAC,ENI9BtG,MGDgB,GAAoK,EGHvJ,CAAnC,QNI6B,CAACC,KAAD,EAAgF;AAAA,ADAzG,AGAAoE,ACDsL,AEEtL,EHDAA,IFAiCnE,AGDdwF,AEEfuH,KLDqG,AGD6E,IDCzK,GAACxN,EGCI,GAAGoM,GHDC,CAACvM,EGCI,GAAEuN,CHDA,CAACtN,cAAP,CAAsBC,AGCC,GAACuN,IHDxB,CAA8B,IGCrD,CHDuB,AGFuB,CHExB,AGEtB,EHF6D,EAAvC,CAAtB,cFAuC,AGDd,CHCgF,OGD6E;AHC7E,ADCzG5O,AEDJ,ACCI,AIHJ,EPGIA,EEDEmC,AKFAgJ,ENEwCnJ,AECpC2E,IFDmG,IEC3F,CDDD,CFCC,CGAG/B,AIHF,CPGC,AEDA,EFPC,AOKChD,CJGG,CAACiD,KDDpB1C,ACCe,AIHQ,CJGGhB,AIHF,MJGQ,CAACC,GDDnB,CAACgB,EKFQ,CAA7B,ILEoB,EAAUC,CCCE,CAAsBhB,OAAtB,CAA8B,IDD1C,EAA0BiB,ICCd,CAAX,CAAjB,GDDgB,EAAqCC,MDAN3C,QCA/B,EAC4G,EDDjE,CAACO,MAA6C;AAAA,ADEzG,AED4H,AEF0D,AEItL,MLHoEG,ACACkC,AEDlC4F,AEIhC0G,IFJmL,KHC7E,ECCmB,GIE3G,IAAE,CAAnB,EAAqB,sDFJmB,EAA8I,GHCxGlP,ECAGA,UDAS,CAACU,CCAE,CAACI,ODAW,QCCmB;ADA5H,ADEAT,AGDA,AIHJ,ADKQ,ENDJA,EOJEwJ,ENEExH,CECA,IAAI6C,AGEG4I,EHFF,EFDI,CECH,CAAV,AGEI,CLHY5L,AKEK,CNAJ,AGDJgD,AGGb,CCNkB,CPIC,AGDL,EFDO,AMFAqG,CJGNjF,CHTE,UCQO,CMFU,CJGlC,AIHmCuD,EJGL3E,CFDH9C,CECI,EAA/B,CFD+B,CECG,EFDF1B,MMFpC,GNE4B,CAAH,EAAwByB,KAAxB,CAArB;AACA,ADEA,AEH4H,ACExHoE,AIHR,AHD0L,AEOrL,GAHD,CHAIA,AIHF2E,ELA6GrI,AEDnE4F,GHGrCpG,AKID,IAAI2M,CHHI,CAAC9J,EAAD,CFDd,AECI,GAAc6B,ACJoK,CGClK,ADMD,GCNIwE,ELCqG,AIKpG,CAAlB,CHHoB,CAACrG,AGGD,EHHA,CAAR,CAAY,CAAZ,CAAd,EIHgC,CAACgG,kBAAzC,mCHDgE,MFCyElL,AEDiD,YFCrC,CAACa,gBACtB;ADE/H,ADEGP,AGDIkG,AGGA,CLPR,CDKIlG,EGDIkG,cHCY,CGDG,CHCD,AGDEtB,EAAD,CHXF,AGWb,GAAmB6B,QAAQ,CAAC7B,EAAD,CAAR,CAAY,CAAZ,CAAnB;ADHwH,ACIxHuB,AIHR,AHH0L,AESlL,IHHAA,AIHFmJ,ELDF9M,AEFoE4F,EES5DyG,WHHW,ACNmK,CDMlKjK,CIHD,CJGA,CAAf,CDJwH,AKCtGlD,EJGC+E,CGGI,GAAG6H,CCND,CAAC,EJGC,CAAC1J,EAAD,CAAR,CAAY,CAAZ,CAAnB,MGG2C,CAACoE,CCNnB,CAAjC,IDMkC,CAAyB,UAAA8F,OAAO,EAAI,gBFTgB,GAAoG,EFEnKpP,YAAY,CAACW,aAA4F;ADIhI,ADCI,AGAC,AGGO,ILJN2B,EDCE/B,MAAJ,CMGe6O,ENHF,GCDG,EKIM,CLJH,AKII,CAAD,CAAP,GAAaF,cAApB;ALJYjN,ADEhB,AENwH,AKEhI,AHJ0L,AEWjL,ELLeA,EMFlBkM,CDK4B,CJPiBpL,AEFwC4F,AESnF,CAFsB,CNCnB,AMIH,ONJU,GEN8G,AEF0D,EJQnK1I,ECFqB,AMFpB,ENEAgC,CMFG2N,EPIhB,KAAwB,QAA3B,EAAoC,AOJA,CAACzB,kBAA7C,4BLFgE,AEFwC,EAAkF,GFEvHxL,cAA6D;ADIzG,ADGX,AGDRnC,AIHJ,CNCA,CEEIA,CFDJ,CMFM8N,KJGK,CAAC7N,GHCO,AGDf,GIHc,EPIMR,COJH2P,MPIT,WOJ0B,CAACtB,GJGJhI,SIHnC,IJGI;AHEK,AERuH,ACO5H9F,AIHJ,AHN0L,AEalL2O,EHJJ3O,EIHEqP,ADOEV,CNLA,CEN2E/O,AEFyBwI,GDSjG,CAACnI,CHCG,EGDX,IIHe,GLJ6G,AKI1GmP,AHNoK,GEa/J,CAAC/J,IAApB,CAAyB+I,QCPM,CAACF,QDOU,CHJRnI,AGIS4I,GCPnD,OJGI,SGIkE,CAAC/I,MAArB,CAA1C,EANsB,CAOtB,cJZ0FpG,AEFyB,EAA+D,UFE5E,CAACY,aAAiB;ADMhIkB,ADGYtB,AGDRA,AGKI,EHLJA,IFFE,ADGMA,CCHLuB,EEEI,CAACtB,GHCO,AGDf,CFFJ,ADGoBA,GCHH6B,ADGL,cCHZ,kBEE4CkE,eAAxC;AHEK,AETL,ACQAhG,AIJJ,AHP0L,ACT1L,EFoBIA,EIJEsP,EHPyHjH,GFGpH,ACQA,CAACpI,GAAR,CIJY,GAAGuB,IHPuK,GGOhK,CAAC,YAAD,CAA1B,kBJImDyE,eAA/C;AHEC,AETG,ACQJC,AEpBJ,ACwBQ,EHJJA,CHlBiB,CKFf1G,KCwBOkF,CAAC,GAAC,CHJC,AGIR,EDxBU,ACwBAA,CHJDxD,AGIE,EDxBEM,CCwBDmN,KHJK,CAAC5N,AEpBE,CAAC,KFoBG,CAACC,MGIM,CAAC4E,MAApB,CHJM,CAAsB3E,AEpBpB,CAA5B,ACwB+C,CAAvC,EAA0CyD,CAAC,EHJzB,AGIlB,CHJgD,CGIF,WHJ5B,CAAD,EAA8C,EAA9C,CAArB;ADPI1C,ACQJhC,AILJ,AHR0L,AEiB9KyO,EHJRzO,EDRIgC,AKGFuM,EHR0IjG,AEiBpImG,GHJD,AGII,CHJHxO,CDRG,EAAP+B,ACQJ,AGIe2M,OJdR,EKKa,GAAGW,AHR+J,OEiBpJ,CAAC5K,CAAD,CCTD,ADSlB,CCTmB6J,ADSI,CAAvB,KAA2BI,OHJFzI,KIL5C,OJKI,AGI6D,CAACxB,CAAD,CAAnB,CAAuB,CAAvB,IAA0BiK,mBAAmB,CAACjK,CAAC,GAAC,CAAH,CFjByE,AEiB5F,CFjBkH,AEiBzF,CAAzB,CAArD,CAAP;ANHR,AERI,ACQJyB,AILJ,AFhBA,ACyBS,EHJLA,EILEoJ,AFhBAzN,CCcwB,CNOtB5B,AMKA,SNLJ,EGAe,CHAC,AKrBA,EFqBAgB,CErBGM,KEgBK,EJKA,AErBE,CFqBDT,AILEuO,AFhBA,MFqBI,CAACtO,GILK,CAACuO,UJKb,AErBC,CFqBqBtO,AErBnD,OFqB6B,CAA8B,GIL3D,MJK6B,CAAD,EAA2C,EAA3C,CAAxB;AHCI,AERAgB,ACQJjC,AIJJA,AHX0L,EDetLA,EDRIiC,EEP+JsG,CGWhK,CPII,AOJHtI,CJIG,CAACA,CIJZ,EJII,EHAc,GERI,CEPoK,CJenKP,AERfuC,UFQG,IEZA,CFY2B,QAA9B,EAAuC,AGAPkE,AIJF,IAAIyB,IAAJ,GAAWC,IJI7C,MIJkC,EAAtC,kBAAqE,IAAID,AHX4G,CAAK,GGWrH,GAAWE,eAAX,EAArE;APKY,AERJ,ACQJ1B,AEtBJ,EFsBIA,EEtBE3E,SLsBa,KAAK/B,KGAC,CEtBC,EFsBAwB,CEtBGY,CLsBjB,MGAsB,CAACf,MAAM,AEtBE,CFsBDC,AEtBES,cFsBT,CAAsBR,KEtBzD,EFsBmC,AErBnC,CFqBiE,aAA9B,CAAD,EAA+C,EAA/C,CAA9B;AHCK,AERDiB,ACQJlC,AIJJ,AHZI,AEmBIyO,EHHJzO,EDRIkC,AKIFsN,ADOEf,CNLA,EMKG,EHHA,AChBA,CDgBCxO,CHAG,AMGA0O,EJXE,ACQb,EDRIzM,MKIe,GLVZ,AKUe,MDOQ,CAACyM,ECP7Ba,iBAAoB,ADO4B,CCP5BvK,ADO6BW,CHHRQ,GIJjB,EAAG,ADOE,GAA2B,CAA5B,CAAnB,CAAkD,CAAlD,KAAsDsI,IHHjE,UGG+E,GAACC,mBAAmB,CAACA,mBAAmB,CAAC/I,MAApB,GAA2B,CAA5B,CAAnB,CAAkD,CAAlD,CAArE,CAAP;ANFI5F,AERJ,ACQJqG,AIJA,AHZI,ACNR,ACyBQ,EHHJA,EEtBE0E,ELsBM/K,AOJJyP,KDOOnC,ENHI,CAACrN,GAAR,AOJO,AFlBA,ACyBE,GCPCyK,AFlBAlJ,ACyBAiN,EHHE,CGGhB,CAdsB,CHWLvN,AGIrB,ED1ByB,CAAC,KFsBG,CAACH,IIJM,CAACkE,CJID,CAACjE,AEtBZ,CAA7B,CEkBwC,CAApC,WJI8B,CAAsBC,OAAtB,CAA8B,YAA9B,CAAD,EAA8C,EAA9C,CAA7B;AHCK,AERDkB,ACQJnC,AIJA,AHZImH,AEoBH,EHJDnH,CGZM,CJIFmC,AERAgF,EGYAuI,GJIG,AChBE,AEoBH,CHJEzP,CChBJkH,EDgBJ,AGISqH,ECRI,CHdN,EFUW,AKIFD,ELJZpM,EIYc,KAAG,CAAf,EAAiB,IJpBhB,EKY2B,CAACkH,cJIOhD,EIJS,CAACT,MAAlB,EAA0B6J,SJI5D,EIJkC,CAAlC;APKC,AERG,ACQJ1O,AIJA,AHZI,ACPR,AC2BQ,EHJJA,CH1BiB,CKGfsI,IFuBI,CAACrI,AIJA0O,SAAP,EFnBkB,GFuBlB,AEvBqB3E,CFuBC5J,OAAtB,CAA8B,IEvBI,CAACkI,eFuBnC,CEvBJ,CFuBwD,CAApD;ADPIjH,ACQP,AIJA,AHZO4F,ACPR,AC2BQ,CCZR,GLAQ5F,AERA4F,ACPF0C,IDOM,AEoBAiE,EFpBJ3G,IAJG,CFYQ,EAAX5F,KGfgB,GAAG2I,GHKhB,AIsBoB,GAAGsD,OD3BM,CAAC3D,QC2BS,CAAC5B,MAAjB,CAAwB,ED3B1D,EACA,MC0B0D8F,OAAO,EAAI;ANJjE,AEPI,AERA3G,AEoBI,IFpBJA,EJeA9H,OMKWyO,MNLf,AIfmB,CEoBG,CFpBlB3G,AEoBmB,CNLH,AMKE,CAAP,GAAayG,UFzBrB,IEyBC;ANJJ,AEPArM,ACORtB,AIHA,AHZQ,ACPRf,AC2BS,IJZDqC,AKIFsN,CDM4B,CHH5B,AGGE,CHHDvO,AEtBA,ACuBoB,CNDhB,AKtBHnB,AC4BA,GD5BR,ILsBkB,AOHD,GAAG,EPGGN,EOHvB,CJGA,CAAwB,CDPK,EAArB0C,GCOR,EAAgCiE,EHArB,KAA+B,QAAlC,AGAR,CDnBW,CFmBwC,CKtBR,IAAIsB,IAAJ,GAAWC,UAAX,EAA3C,kBAA0E,IAAID,IAAJ,GAAWE,eAAX,EAA1E;ALuBY,AEPJ,ACOR,AIHA,AHZQI,ACNR,IEkBM0H,AHZE1H,ACNJ8C,SLqBe,EOHF,EHZI,CJeGrL,AOHJ,CHZZuI,CCNR,CEkBA,WPGY,AItBD;AJuBF,AEPD5F,AKIR,AHZQ,ACNR,IHcQA,AKIFuN,AFlBF5E,CLmBI,MAEO,CKrBH,GAAC,CEkBK,CFlBlB,EEkBqB,GLJK,CKI1B,CLJQ3I,kBAdG;AFsBCtC,AEPJ,ACQR,AChBQmI,ACNR,ACyBQwG,IFnBAxG,ACNJ+C,ACyBIyD,ENJI3O,OAAO,AKrBN,CLqBOC,EIfA,ACNN,CLqBF,CIfUkI,ACNtB,MCyB2B,CAAC9C,IAApB,CF5BG,AE4BsBgJ,gBAAgB,CAACM,oBAAmB,CAAC/I,MAArB,CAAzC,EANmB,CAOnB;ANJC,AEPDrD,AKIR,AHZQ,ACNR,AC0BQ,IJZAA,AKIFuN,AFlBF3E,UAAU,CEkBG,CLJG,CGdL,CHcP5I,AKIY,CFlBpB,QEkBMuN,GLpBK,QKoBS,CAAC7K,IAAD,EAA0C;APIzD,AEPG,ACOR,AIJ8D,AHXtDmD,ACNR,GLZqB,CGiCjB5B,ACfI4B,ACNJgD,EEiBuB2E,IAAmC,GFjBjD,GFqBG,AErBF,EDMQ,ACNtB,CFqBmB,CAAnB,ACfQ3H,cAXG,+CGsBqB,IAA8B;ALFtDxI,ACOR,AIL8D,AHVtD,ACNR,IHcQA,ACOJ6G,AErBA4E,EEgBkC2E,IAAwB,GJKjD,CErBC,EFqBE,CAAC,AErBF,CHcO,CGdtB,CHcQpQ,CCOQ,EAAO,IAAP,EAAa,IAAb,CDzBL,ACyBX,+CIL2C,GAAmB;APK1D,AENI,ACOR,AIN8D,AHTtDyI,ACNR,ACwBQ,IHHJ3B,ACfI2B,ACNJiD,ELoBIlL,AOLwC6P,GJMvC,AGGIvL,CAAC,CCTgD,CJMlD,CAAC,AGGE,CAAP,CDxBO,CCwBGA,CAAC,CDxBH,CLoBZ,AIdmB,CCNvB,ACwBoBiK,CFlBZtG,CJcgB,AGCZ,EAAY,OAAZ,EAAqB,GC5BtB,IE+B4B,CAACzC,CHH5B,CAAZ,EACA,EGEoB,GAA2B,CAAvC,EAA0ClB,CAAC,EAA3C,EAA8C,wBCTA,IAAQ;APMtD,AENA,AKCJ,AHTI,ACNR,ACwBY+J,IDxBRlD,EEeI5I,ADSI8L,ENJD,CMII,IAAIE,ENJD,COLA,GAAC,CPKI/O,AOLnB,CFfiB,GAAC,EAAtB,OCwBsC,CNJ3B,AMI4B8E,CAAD,CAAnB,CAAuB,CAAvB,CNJuB,IMIIiK,INJtC,EAA2C,cMIc,CAACjK,CAAD,CAAnB,CAAuB,CAAvB,IAA0BiK,oBAAmB,CAACjK,CAAC,GAAC,CAAH,CAAnB,CAAyB,CAAzB,CAArD,CAAP;ANHA,AENJlC,ACOR,ACfQ8F,ACNR,ACwBS,IJVD9F,ACOJmE,ACfI2B,ACNJkD,CCauB,CAYnB,ONLW,GE3BR,EF2Ba5L,AGCN,GAAG,CAAC,AErBA,CDMK,EAAnB0I,ACNe,CFqBF,CErBrB,CFqB4B,IHDhB,AGCS,EAAa,IAAb,CAArB,EACA,CDRuD,EEvB5C;AJ8BF,AEP8C,AKCnD,AHRIC,ACNR,IDMQA,ACNJkD,CLkBI,COJAxG,ILDcxC,AKCV,CPMG,GOND4G,GHRO,EAAbd,EFO+C,EGbhC,GAAC,EAAxB,EEc8B,CAAC,CAAD,AHxBnB,CGwBG,CAAoBF,eAA9B,EAA8C,yCLDhB,KAAKpG,cAAgB;AFQ3CjC,AGCZ,AIPQ2C,AHRA,IDeJiE,AIPIjE,EPMI3C,OAAO,CAACC,AONF,GPMN,AONSgQ,CJOH,GAAG,CAAC,AIPI,GAAC,CJON,CIPb,CJOoB,IAAP,EAAa,IAAb,CAArB,EACA;AHDS,AERG,AKEJ,AHRAzH,ACNR,ACuBQiG,IFjBAjG,AEiBAiG,GAAG,EDvBF/C,EEcM/I,ADSAgM,KFnCJ,KG0BH,OFdR,GAA+B,ACuBG,CAACA,QFjBdlM,WAlBV,CEmC2C,CFjBrB,AEiBsBmD,MAApB,GAA2B,CAA5B,CAAnB,CAAkD,CAAlD,KAAsD8I,cAAc,GAACC,oBAAmB,CAACA,oBAAmB,CAAC/I,MAApB,GAA2B,CAA5B,CAAnB,CAAkD,CAAlD,CAArE,CAAP;ANFH,AERO,ACSZ,AIPK,AHRO,ACNRoF,ACuBI,EDvBJA,CLpBiB,AO+BjB,CJUEnE,KIPI,CLFKpE,AENCgG,CEiBD6E,ECTFrI,EJOI,EIPA,ADSI,CHFD,AErBA,CDMK,CEiBHwJ,CJXI,AKEPpF,AFdEnI,CFqBrB,ACf4B,CEiBpB,CJXmB,ACU3B,AGb2B,CAevB,EFlB6B+G,CFMlB,CGZc,CAAClH,EHYK0B,IGZC,CEcD,AFdEzB,CEcD,CAAD,CAAhB,CAAoBqH,CHR3B,CFMkC,AEPb,CAErB,EFKqC,IAArC,CGZkB,CHYwB,AGZFpH,IEc1C,EAA6C,CFdzB,CAA8B,KAA9B,CAAD,EAAuC,EAAvC,CAAzB;AHaYjB,AKER2C,AHPI,ACPR,ACwBC,GAhBK,CCMFA,EFdEgJ,EHYM3L,CIYP,KCVS,CLFK,CAACC,CKEHgQ,CFdC,CHYN,EGZSzL,CEcC,GAAC,AFdE,CAACC,CEctB,IFdiB,CAAW1D,MAAM,CAACC,cAAP,CAAsBC,OAAtB,CAA8B,cAA9B,CAAX,CAArB;ALoBA,AEPS,ACSb,AIPQ,AFdJgK,ACwBIjL,EDxBJiL,EFqBEnE,AGGE9G,ENLAK,CETI,GGVA,CEcGsC,ADUA,CAAC1C,CJZC,AGZJ,EAAT,ACwBI,GHHY,GAAG,AIPf,CPKJ,GAAuB,AGE3B;AHDQ,AEPI,ACSZ,AIPK,AHRO,ACNRiL,ACwBC,EDxBDA,CEWM,CJUJnE,IHFK,COLF,CHRS2B,CAAC,ACNN,GDMS,ACNR,CLmBI,CKnBd,EDMsBd,EJaH/H,EIbD,EDeI,CCfO8I,EDeJ,KAA7B,ICfsB,CJaX,CIbC,CAJqB,CAKrB,EJYiC,QAArC,EAA8C;AAC1C,AEPA,ACSZ,AIPQhG,AFdJwI,ACwBH,CA3CD,CDmBIA,EFqBEnE,AIPErE,QFdM,CLmBK,COLD,CFdH,EEcM,AFdjB,CLmBoB9C,AOLFkQ,IAAI,CJOD,EIPEC,CJOC,GIPP,EJOrB,EACA,AIRiC,EPKrB,AOLJ;APMC,AEPG,AKEJ,AHRI,ACNR5E,EAAAA,GLiBI,KIXO3I,CJaA,AOLAE,AFdF,CHYGD,EGZF,EAAV,KEcI,AHRkB,GAACgG,CAAf,CFMkB,CEND,EFMI,CAAC,KAAKvG,cAAL,GAAoB,KAAKI,YAA1B,KAA0C,KAAKF,qBAAL,GAA2B,EAA5B,YAAiC,IAAG,KAAKA,qBAAL,GAA2B,EAA/D,EAAsE,KAAKzC,cAAL,GAAoB,EAA1F,CAAzC,KAAyI,SAAE,IAAG,KAAKyC,qBAAL,GAA2B,EAAhC,EAAuC,KAAKzC,cAAL,GAAoB,EAA3D,IAAgE,CAAzM,CAArB,CAHK,CAKL;AFMAI,AGEZ,AIPK,AHRW,ACNZqL,ACwBJ,EDxBIA,EFqBEpE,AGGA4H,ENLM7O,MKnBE,CLmBK,AGEJ,CHFKC,CKnBL,CFqBG,CHFN,AKnBR,GFqBJ,EAEA,KGC6B,GAAG,SAA1B4O,uBAA0B,CAACL,SAAD,EAAY/F,SAAZ,EAAuBqG,cAAvB,EAA0C;ANJjE,AENG,ACUZ,AITC,AHRe,ACNZxD,ACwBAyD,CCtBJ,CFFIzD,ACwBAyD,OAAO,GJXKpM,AIWF4L,CDxBC,EDMQ9F,CCNP,EAAZ,IHaQ,CANK,CAOL,AERoB,IAAE,EEkBF,CAAC+F,CFlBG,KAAK5F,GEkBT,EAAYkG,aFlBZ,CAAhB,AEkBgB,CFpBH,AEoBzB,CFjBQ;AJaP,AGIL,AChBa,ACPTvD,ACwBAyD,EDxBAzD,ACwBAyD,CNpDiB,II+BT,CEqBF,GAAGT,EFjBK,IAAG9L,ECPA,GAAC,EAAlB,IDO4B,CEiBD,CAAC+L,EFjBE,KAAKnG,EEiBR,EAAYI,SAAS,EFjBlC,CEiBmCqG,CFjBE,aEiBxB,CAA3B;AJVQ,AKCZ,AHPgBrG,ACPZ+C,ACwBAyD,EDxBAzD,ACwBAyD,ECVEiB,IHPUzH,AEiBN,GAAGuG,CJXEvM,IKCG,CHPO,AEiBN,ECVE,CHPK,ACPJ,ACwBAsM,CFjBN,CADuC,CFO7B,AELV,ACRO,EAAnB,CHauB,CIWvB,CCVEmB,GLD0BhO,SAAjB,AKCM,CAAA+C,GLDwBxC,CKCpB,EAAI,QLD2B,IAAE,KAAKR,cAAnD,EAAkE;AFM1E,AELYU,ACShB,AIRI,AFdA8I,ACwBA,EDxBAA,EFsBEvE,EHJE5G,AOJE6P,GDUClB,CJXKtM,EKCA,EJQA,CIRG6M,ADUf,EHFe,GDTO,CFKtB,AKlBmB,EHaM,CFKH,AELV,AGbQ,CHYsD,CAElE,ACQNtI,AEtBF,MEcgC,CAACjC,GJQlB,CIRiB,CAAhC,CJQ6F;AHHzF,AEJK,ACOoF,AIP7F,AHPY,AEiBf,CALD,EAOA,GHLoBkC,AIPViJ,EPIC,CEPC,ECUqF,EIPhF,EPIC,AEJA,AEPK3H,CGOHf,GLACjF,CFIE3C,IIXP,CAHuC,CAI3C,IFMoB,GAAC,EKAM,CPI5B,AOJ6BmF,ELAFhD,EKAC,CPIK,AOJxC,QPII,EAA6C,CEJpB,GAAoB,KAAKrC,cAAxC,EAAuD,MCO/C,KAAuE;AHFrF,AEJI,AKAZ,AHNS,ACTT,MEeMyQ,CHXQ,ACJV,IAAI3L,ELmBO,AOJF,AHNC,ACTL,GEeOoL,AFfN,CDSS,ACTnB,CLmBoBhQ,CKnBP4E,EAAC,CDSUyD,ECTT6C,GEeY,CAAC/F,IAAD,EPInB,AOJ0B0K,AHNf,CAAkB/J,KCTrC,CDSmB,CCTclB,EDSW,ACTV,CEeP,AHNR,CCTnB,CEe+CkL,CFfV,CDSYnN,SGMtB,EAAiCoN,AHNA,IAAE,KAAK1H,GGMxC,CAA3B,QHN8D,CAAkB,CAAlB,EAAqB,CAArB,CAA5C,IAAyE,KAAKC,cAAL,CAAoBxC,MAApB,GAA2B,CAA3B,IAAgCnD,WAAW,IAAE,KAAK2F,cAAL,CAAoB,CAApB,CAA1H,EAAkJ;AJW3J,AEJOzF,ACKiF,AIL7F,AHNY,ACTR,KLiBA,CGGyByE,AILvBkJ,EFfC3E,EHeKhJ,CFID,IGCkF,AIL9E,GAAGqC,ELAI,AGfH,CAACN,EHeMjD,AGfP,CAAZ,CAAgB,CAAhB,KAAoB,MAAvB,EAA8B,EEeO,CAACwD,CLAI,CAAC,EKAN,CAAzC,ELAoD9C,cAAN,EAAsBM,WAAW,GAAC,KAAKR,ECK9C,IAAsD,QDL/C,EAAuD,KAAKG,WAA5D,EAAyE5C,YAAY,CAACU,SAAtF,CAApB,GAAqH,KAAKoC,kBAAxI;AFKJtC,AEJC,AKAT,AHNY,ACTJmL,ACyBZ,IAAM+D,ENNMlP,AOJFiE,AFfEkH,GHYM,CAGL,GFIM,CAAClL,AMMJ,EDzBM,CLmBV,AKnBWoF,ACyBJ,IDzBP,CAAgBsG,KEeG,GAAGlG,IFfM,CAACf,EAAD,CAAZ,CAAgB,CAAhB,KAAsByG,UAAU,CAACvF,GEeE,CAACX,EFfd,EEea,CAA3D,AFfgE,CAAxC,CAAhB;ALoBH,AERS,ACO+E,AIH7F,AHNY,ACTJqG,ACwBQiD,EAAAA,IHN6BlH,AIHzCkJ,AFfIjF,GEeD,GAAG6E,CLAE,IGfO,CEeH,AFfI9K,ECwBc,CCTf+K,CJG0E,AElBrF,ACwBQ7B,CDxBS5C,KEef,GAAmB0E,IFfQ,CAAC3L,EEe5B,AFf2B,CAAZ,CAAgB,ACwB1B,CCTwB4L,AFfd,CAAjB,QEeE,GAAyCrM,qBAAnD,mBJG8D,KAA+B;AHE5F,AEJW,AKAZ,AHNY,ACTJwH,ACuB4BoD,EAAAA,CN1DnB,GKmCTpD,GEeD8E,GAAP,AHNe,KAAKnI,QCTO,ACuBgC,CDvB/B/C,CCuBQwJ,GDvB5B,CDSO,ACTkBlD,CDSE/F,MAApB,KAA6B,ACTC,CDS9B,ACT+BlB,EAAD,CAAZ,CDSgBjC,ACTA,CAAhB,CAAzB,SDSoD,GAAC,KAAK2F,cAAL,CAAoB,CAApB,CAAjD,EAAwE;AFOxEzF,ACCiF,AIDhG,AHNmB,ACTX,ACsBU,CCfnB,ADeA,ID1BQ,CFoBiE2E,KEhB3D,CHeE3E,GGfCgJ,MFgBgF,CDDvE,GAAGjJ,EGfA,CAACgC,EAAD,CAAZ,CAAgB,CAAhB,KAAoB,CHeM,GAAC,EAAhB,GAAqBjD,AGfnC,EAAiC,kBHesB,CAAC,KAAKU,cAAN,EAAsBM,GCCF,IAAQ,IDDK,GAAC,KAAKR,cAAvC,EAAuD,KAAKG,WAA5D,EAAyE5C,YAAY,CAACU,SAAtF,CAApB,GAAqH,KAAKoC,kBAA3J;AFIZ,AEHS,AENOmG,ACTRwC,ACsBZ3J,MNJQvB,AKlBIkL,ACsBN,CAAC1J,GFbakH,CFZH,CFqBb,AEFQ,CFEGlI,CKlBK,ACsBpB,CDtBqB8E,ECsBJ6J,EFbY,ACTjB,CAAcvD,ELkBtB,AIT4BlK,EJSP,GMIzB,KDtBsC,CAACiD,EAAD,CAAZ,CAAgB,CAAhB,IDS0B,CAAC+D,ACTLwC,QAAQ,CDSJ,ACTKrF,EDSOnD,ICThB,GAAgB,CAAtC,CAAd,EDS+D,GAACiG,CAAxB,EAA2B,KAAKR,aAAhC,CAAhC,CAFoE,CAGpE;AJSZ,AGHJ,AIAJ,AHLoB,ACVRkD,IEeNoF,EFfMpF,ELkBA,CGHD,MHGQ7K,AKlBE,CAAC8E,IAAV,CAAesG,GLkBf,COHe,GAAG,CPGC,AOHA,CAAC,GFfO,CAACjH,EEeT,AFfQ,CLkB3B,AKlBe,CEeY,AFfI,CEeZ,AFfJ,CEeG,AFflB,CLkB+BnE,COHD,CAAC,MAAD,CPGU,COHF,CAAR,CPGW,AOHvB,CPGlB,COHyC,CAAC,EPGIA,SAAS,COHd,EPGiB,AOHF,CPGG,AOHlB,CAAvB,CPGtB,AOHR,EPG0E;AAC9D,AGHJ4G,AIAR,AFfYoE,IFeJpE,AIAFsJ,EFfMlF,GFeC,EHGI9L,AGHT0H,KADG,EHIC,GAAe5G,EKlBE,CAAC8E,CEeH,GAAG,AFflB,CEemB,AFfIsG,CLkBvB,AOHoB,WFfe,CEehB,AFfiBjH,EEeF,AFfC,CEehB,AFfI,CEeL,AFfqB,CAAhB,CEee,AFftC,CEeuC,YAAD,EAAe,CAAf,CAApB,EAAuC,CAAC,MAAD,EAAS,CAAT,CAAvC,EAAoD,CAAC,MAAD,EAAQ,CAAR,CAApD,EAAgE,CAAC,MAAD,EAAQ,CAAR,CAAhE,CAA9B;APIS,AEJG,ACCJ0C,ACNY,ACTX,IFeDA,CHCA,AKpBM,MLsBD,AKlBC,CHcExE,CCCC,CCNSiG,CDMlBzB,AEfSuE,SFaN,GEbkB,CHcjB,AGdkBjH,CHNb,CAqBL,AGfiB,CAAZ,CAAgB,CDSY,ACT5B,GDS+B,ECTX,GDSgByD,GCTvC,EAA8B,ODSI,CAAkBW,MAAlB,CAAyB,UAAAC,IAAI,EAAI;AJUrE/I,AGHJqH,AIAR,AHNwB,ACTZ6D,IFeJ7D,EHGIrH,AKlBAkL,GEeHwF,IPGU,CAACzQ,CKlBC,CAACoF,CLkBV,EITmB0D,CDMP,AEfZ,CAAe4C,CFenBtE,CCN2B,CAAC,CGMpC,AHNmC,CGMTwE,AHNK,GGM/B,AHNyCpJ,EGMViD,EFfQ,CAAChB,EAAD,CAAZ,CFYhB,AEZgC,CAAhB,CEe3B,AHNwB,EGMkB,EFfOwG,SAAS,CAACtF,MAAV,GAAiB,CAAvC,CAAf;ALmBH,AEJG,ACCJ0B,AIAJ,AHNiB,ACTT+D,IFeJ/D,EEfI+D,CEeH,IAAI3G,AHRmC,CFOjCjC,AKCD,AHRM,CALoE,CAQpE,CGKL,CAAX,AFfkB,CAAC4C,CEeLX,CJAK,AIAJ,EJAX4C,AEfI,CEeUuE,AFfMF,CHcF,EKCD,CLDE,AKCD/F,KLDM3D,CKC5B,EAA8ByC,AFfM,CEeL,AFfMA,CFW9B,CIIP,AFfoC,CAAZ,CEeU,AFfM,CAAhB,CAAhB,IHce,GAAoB,KAAK9E,cAArC,IAAuD6C,WAAW,GAAC,KAAKP,SAAxE,IAAqFO,WAAW,IAAE,KAAKR,cAA1G,EAAyH;AFKhI,AEJWW,ACCR,AIAA,AFfI4I,GL3CS,GK2CTA,EEeAK,ELDIjJ,CKCD,CAAC8B,CAAD,CAAH,CAAO4H,SFfW,CAACjH,CHcC,AKCpB,GLDuB,AGdvB,CHcI,AGdoBsG,CEeDjG,SAA3B,EAAqC,AFfG,CAAChB,EAAD,CAAZ,CAAgB,CAAhB,CAAxB;AHeC,ACCL6C,AIAI,AFfH,IFeDA,CEnBM,IHgBF,EGZC,EEeMsE,CJNR,CDKM,CKCK,CAACnH,CAAD,CAAV,iBJAOjC,WANR,EAMoB;AHG3B,AEHY,ACCJ,AIAH,AHPW,ACRRzC,MLiBJE,AKjBIF,IFeIwH,GEfG,CFeC,AEfAvH,CLiBhB,AIToByE,CJSNlE,AITO,CDOF,AEfX,CFeA,CADmB,ACNL,CDQd,ACRQ,EAASkE,CAAC,GAACmE,EJS3B,EAA2B,eITmB,CAACjD,MAA/B,EAAuClB,CAAC,EAAxC,EAA2C;AJUvD,AEHQ9B,AKCX,AHPmB6F,ACRf,QLiBG,EEHI7F,EENQ6F,GJSLjI,MITc,GAAGiB,EFMJ,CFGpB,EEHuB,CAAC,EFGF,GEHOU,KFG7B,IAAkC3B,AITU,CAACiI,IFMrB,GAAoB,EENA,EJSE,AITU,CFMPlG,AENL,EJSG,AITYsG,CJS3D,IAAoDrI,KEH7B,KAAyC,EFGA,EITc,CJSX,AITYkE,CJSX,AITU,CAAnB,CJS/D,AITsF,CFMjB,AENN,CJSY,AIT3B,CAAhC,CADuC,CFOiB,AELxD,KFK6DrC,qBAAL,GAA2B,EAA/B,EAAsC,KAAKzC,cAAL,GAAoB,EAA1D,aAA+D,IAAG,KAAKyC,qBAAL,GAA2B,EAA7F,EAAoG,CAACI,WAAW,GAAC,KAAKR,cAAlB,IAAkC,EAAtI,CAAzC,KAAqL,SAAE,IAAG,KAAKI,qBAAL,GAA2B,EAAhC,EAAuC,KAAKzC,cAAL,GAAoB,EAA3D,IAAgE,CAArP,CAAnB;AFIJ,AEHC,ACCD,AIAX,AHNoB,ACThB,SHbY,CA6BL,ACDG6C,CHEE/C,AIpBuE,CAapE,SJOR,AGFc,GHEIc,AGFH,KAAK4G,OHEpB,EGFA,EAA8B;AHGjC,AGFOI,KHAR,GGAQA,GHEH,CGFO,GAAE,CAAN,CAD0B,CAE9B;AHEAxH,AGDC,AIDb,AFhBIA,EAAAA,EEgBE2Q,EPEM3Q,CGJA,EEdD,CAACC,GLkBO,AGDD,AEjBd,CLkBgBA,GAAR,AGDSwC,SIDO,EJCI,CIDH,EJCI,AIDjC,KJCsC2E,SAAjB,GAA2B,CAA3B,IAAgC,KAAKC,IEjBD,IAAIO,IAAJ,GAAWC,CFiBlD,EAAyD,OEjBlB,EAArD,kBAAoF,IAAID,IAAJ,GAAWE,eAAX,EAApF;ALmBK,AEHG,ACEI,ACRI,ACThB9H,EAAAA,OAAO,CAACC,EHeI4C,CGfZ,IDSuB4F,CFMf,CA9BK,CA+BL,MEPwB,IAAE,IAAE,KAAKG,OCTJoC,WDSL,CAAhB,CAdoE,CAexE,ECVZ;ALmBC,AGDWxD,AIFhB,AHLiB,ACVbxH,EAAAA,CLlDiB,EOiEjB,GJEYwH,CIFR9C,AHrBQ,ACML,CEeF,AFfGzE,EFiBQ,CIFV,AFfN,CEeJ,CJEuB,ACPF,CDOG4G,AIFXnC,CAAC,GAAC8L,OJEoB,GAAG1J,WIFF,CAAClB,EJEd,IAA+B,AIFtD,CFf4CqF,CFiBrB,AIFsBvG,CAAC,EJEWuC,AIFzD,EAAiD,EFf7C,KFiBY,CAF2D,CAG/D,WElBgDiE,SAAxD,kBAAyEC,UAAzE;AHgBQ,ACGC,AIHT,AHLgB,ACVhBnL,EAAAA,IEeGwQ,CJDW,EEdP,CAACvQ,EHeGwC,CCGG,AElBd,IFkBmBA,MDHG,GAAC,CKAC,CJGM,AIHLiC,CAAD,CAArB,CLAyBxC,ACGG,AIHH,CAAzB,IJGiCkF,EIHH,ELAtB,IAA8B3E,AKAzC,CJGmB,CIHqB,EJGM,CAA3B,CElBsB2I,GFkBU,CAAC,CDHA,IAAE,ACGG/D,AElBzD,KHe2DpF,WCGzC,EElBwCoJ,CHelD,CCGsE5I,CDHJ,OGf1E,GFkByF,GAAC,KAAK2E,OElBnBkE,EFkBE,IAA4B,EAA5F,EAAgG,CElB9G;ALkBA,AEFYzI,ACGA,AIHR8N,AHLY,ACVhB3Q,EAAAA,EEeI2Q,EPEAxQ,GKjBG,CHeK0C,AGfJ5C,GAAR,CDUmB,EFKD,GFElB,AEFmB,AELKkI,CJON1H,AEFN,MKAc,CAACiE,CAAD,CAAtB,EHLe,CGKagM,AHLK9K,IJOrC,EAAmC,AIPhB,GAAyB,CAA5B,EAA8B,IGKE,CAACkI,UFfCvC,EEeF,EAAeiF,aFf/D,QEeoF,CAAC9L,CAAD,CAArB,CAAyB,CAAzB,CAAf,CAA5C,GFfuE8G,kBAA3E,kBAAqGC,mBAArG;ALkBI,AEFK,ACGGjE,AIHX,AHLmBiB,ACVpB1H,EAAAA,CEaA,KPIQ,AGCIyG,AElBN,CHaE,AKEF,AFfCxG,GFkBS,ACRIyH,CGKX+H,EPEM/P,AEFD,ACGKoG,MCRU,ECV7B,CDUgCpF,ACVVN,EFkBQ,GAAC,EHDvB,AGCW,AElBnB,CAA8B,EFkBI8F,AIHJ,CAACvC,CPEG,AOFJ,CAArB,CAAyB,CAAzB,IJGG,CHDJ,AGDsG,ACN1D,CDS5C,AIJ+B,AHLc+D,GJOPhI,IKjB9C,EDUoD,ACVA,CAApD,CDUgE,CGK1D,EAA8C,EHLiB2H,GJOP,GAAC,CAAvD,IAA4D3H,GIPJ,CAAoB,CAApB,IAAuBiI,CAAvB,GAAyB,CAArC,EJOgC,AIPQ,GJOL,CAAnF,CIP6FR,CJOR,YIPrC,CAAhC,CAD0B,CAE1B;AJOZ,AEFI,ACIH,AIJLyI,AFfP,IEeOA,GJAU,IHEDhR,EGEC,IAAI8C,QHFV,COFkB,CAACiC,CPEGjE,AGED,AIJH,CAAtB,EJI0B,CIJEiQ,IJIGtJ,QHF3B,CGEU,GAA2B,AIJG,CAACuG,CJI/B,IAAiClL,WAAW,EIJd,CJIe,CIJM+N,IJIDpJ,SAAjB,GAA2B,EAA5D,GIJwE,CJIN,AIJO1C,CAAD,CAArB,CAAyB,CAAzB,CJIoB4C,AIJzC,CAA5C,cJIU,EAA2F;AHDpG,AEFOzE,ACIA2E,AIJX,AHLmB,KJKhB,GGIQA,EDJA3E,CFEH,CGEO,GAAGkE,CDJD,CELMrC,CAAC,CFKJjD,EELK,CAAN,EAASiD,CAAC,GAAC,KAAKyD,EDSG,GAAClB,CDJC,CAAC,KAAK9E,AELhB,CAAkByD,CDSrC,CAD6F,CAEjG,GCVY,EAAqClB,CAAC,EAAtC,EFKqB,AELoB,EFKEjC,WAAW,GAAC,KAAKR,cAAvC,EAAuD,KAAKG,WAA5D,EAAyE5C,YAAY,CAACU,SAAtF,CAApB,GAAqH0C,gBAA9H;AFGJ5C,AEFC,ACKA,AILZ,AHL2ByI,ACX5B1H,MLkBYf,AKlBN,CFkBY,AElBXoB,EHrBU,CAsCL,GFCO,AGGD,CHHEnB,AIPQwI,GJOhB,AGGUhG,MCVe,ACXrC,CAAwB,EDWgBhB,EDUP,EErBjC,CFqBkC,CErBFiK,IFqBOtE,SAAjB,CCVsC,CAACqB,CDUZ,EAA3B,CErBtB,GFqBuDhG,ECVK,EAAY,CAAZ,EAAe,IDUT,CCVc0F,EDUb,KAAKf,KCVG,CAAkB1C,CAAlB,EDUpB,ACVyC,CAArB,CAAf,CDUsB,ACVtD,CADqC,CDW3C,ACTM,IDS4D,CAAC,KAAK4C,eAA5E,EAA4F;AHFrG,AGGOE,ACTS,ACZzB,QFqBgBA,IAAI,CCf8B,CAO1B,CDQDR,mBAAmB,GAACC,SAA3B,CAD8F,CAElG;AHHP,AGIQ,AINb,GPzEqB,COyEf2J,GJGY,MAGA,IAAInO,SINM,EJMK,CINJ,EJMK,AINlC,KJMuC2E,SAAjB,GAA2B,EAA/B,EAAkC;ADNxC,ACOII,AErBhB,QFqBgBA,IDPE1E,ACOE,GAAG,CAAP,kBDPwB,GAAG;AFGvC,AEHwCJ,ACQ/B,AIPb,AHJwB+F,KGIpB,CPEIrI,GOFAsE,CLDoChC,CKCnC,CHJe+F,EGId,CAAV,EAAa/D,EPET,AOFU,CPEQhE,CINW,CGIlB+P,ELD2C,AEHtBhP,EFGQiB,UFGxC,EAAmC,EEHI,GKCP,CAACkD,AHJmB,CAAC6C,KGIzD,EAA6C/D,EAAC,AHJU,EGIxD,AHJoEjC,EGInB,SHJ8B,GAAC,CAAZ,GAAc,KAAK2F,cAAL,CAAoB,CAApB,CAA1B,EAAkD,KAAKA,cAAL,CAAoB,CAApB,CAAlD,CAAhC,CAR0B,CAS1B;AJMhB,AEJoDzF,AKExD,AFfJ,MEeO8N,EPEK,CKjBH7E,CHamDjJ,KFIzCjC,KEJmD,EAAViC,GGb5D,CAA0BkJ,CEeE,CAACnH,CFf7B,CEe4B,CPEhB,AOFL,AFfwBgB,CHaY,AKEX,CAAzB,GPE+B,GOFD,CFfrC,EAA0C,ELiB9B,COFR,EAAwC,CPEMhF,gBAAgB,GAAC,GAAvD,IAA8DA,gBAAgB,GAAG,CAArF,EAAuF;AACnF,AEL4DkC,ACS5D,AINJgO,AHJgB,ACXpB,IEeIA,GFfC,GHY+DhO,CFKvDhD,AKjBJ8E,CAAC,CFqBK8C,EErBJ,CAAX,CFqBQ,CErBM9C,CDWa+D,ACXZ,GAAGoD,GLiBV,AKjBa,CHY+D,AKG1D,AFfJjG,CEeKlB,CPEGhE,AELsCkC,AEDhC,CGIV,CAAtB,EHJkC,ACXtC,CEegC8N,CFfFhM,CAAC,CDWS,CCXxC,EAAkC,EDWWkE,GJMrC,AEL+B,KKGS,CAACkF,SHJb,CAAhB,CAV0B,CGcE,AHHhC,EGG+C2C,qBAAqB,CAAC/L,EAAD,CAArB,CAAyB,CAAzB,CAAf,CAA5C;APGC,AENiF7B,ACUjF,AINJ,AHHgB,ACZb,GEaJ,EPEI,GKfIgJ,CEeF,CLJgFhJ,CFM7E,AIjBO,ACAL,CAAC6B,CEeH+L,AFfE,CAAH,CAAOzH,CHW6E,CECvE,CFDiEnG,CGX9E,KAAgB6C,SAApB,CEe0B,CAAChB,AFfG,EEeJ,CAArB,CAAyB,CAAzB,MAA8B,YAAjC,EAA8C;APG5C1E,AEP+B,ACpBhC,AIyBH4Q,AHHgBnI,ACZZ,GFVR,CIyBImI,EPEI5Q,GEPA,GEEYyI,CJKL,AKjBA/D,CLiBCzE,AKjBR,GLiBA,IILqB,GAAGwB,EGGN,CAACiD,EAAD,CAAtB,GAA4BgM,WHHoB,CAACjI,IGGL,CAACkF,IHHG,EAAY,KAAKvF,OGGrB,EAAqBqI,KHHL,CAAoB,CAApB,IAAuB/H,CAAvB,GAAyB,CAArC,EAAwC,GGGF,CAAChE,CHHMwD,CGGP,CAArB,CAAyB,CAAzB,CAArB,CAA5C,OHHgD,CAAhC;AJMf,AEPG,ACWX,AINI,AHHmBO,ACZf,CFZT,EAmCA,AIVU,MAEA,GHHcA,CGGVgI,ELLK3N,MEEc,GAAGrB,UGGD,CAACiD,ELLxB,AKKuB,CAArB,CAAyB,CAAzB,IHH0C,CAAC+D,CGGb,MAAlC,EAAyC,AHHK,EAAYhG,WAAW,GAAC,CAAZ,GAAc,KAAK2F,cAAL,CAAoB,CAApB,CAA1B,EAAkD,KAAKA,cAAL,CAAoB,CAApB,CAAlD,CAAhC,CAFC,CAGD;AJKnB,AEPQ,AKKLwI,AFfH,GLjEgB,COgFbA,sBAAsB,CAAClM,EAAD,CAAtB,GAA4BgM,gBAAgB,CAACrB,aAAD,EAAgBoB,qBAAqB,CAAC/L,EAAD,CAArB,CAAyB,CAAzB,CAAhB,CAA5C;ALJC,AKKJ,AHHmB,ACZvB,EAED,GH3DW,cEqEoB+D,SAAS,IAAE,IAAE,KAAKG,kBAAT,CAAhB;AJKpB,AGKJ,AINC,AHHoB,IDSjBnB,EHLIpH,IGKE,GAAG,EAAb,EACA,KHNI,CAAqBM,mBAArB,EAAyC;AACrC,AEPA,AEGS,QJIL,AEPAoC,CErCwJ,CAyCxJ,IFJJ,CFOWpC,EEPC,iBFOR,KAA6B,QAA7B,IAAyCA,mBAAmB,GAAC,CAA7D,IAAkEA,mBAAmB,GAAG,CAA5F,EAA8F;AAC1F,AEPA,ACYZ,AINA,AFfA,IEeMkQ,AFfA/E,CFqBDpH,CAAC,GAAC,CDZQ,ACYf,CHLiB7E,CGKP6E,CAAC,AErBI,GFqBH8B,AErBM,CHSI,KAAKxE,GKMA,AFfrB8J,GLgBM,AGKZ,AIN8B,CLNf,CCYWpH,CHLW/D,AGKV,EAA3B,CDZuC,AGTrB,CFqBY,AErBXuI,EEeb2H,CFfY,EAAS,EHSf,EAAoC,MFOpC,QODkB,CAAC5L,IAAD,EAAOsL,GAAP,EAAc;APEnC,AEPO,ACYZ9I,AINAzH,AHHS,ACZT,EFqBAyH,AINAzH,GPDI,EI5CU,CDmDR,CAAC0E,AINA,CJMD,AINEzE,CPCC,AGKT,EINA,AHHa,CDSHiH,CDZS,KAAKlF,ICYJ,CAAC0E,EDZT,GCYc,CAAChC,CAAD,CAAN,EAAW+B,IIND8J,GAA9B,EJMwC,CAAC7L,CAAD,CAApB,EAAyBiC,cAAc,CAACjC,CAAD,CAAvC,EAA4CkC,cAAc,CAAClC,CAAD,CAA1D,CAApB;AHJQ1E,AEPC,ACYZ,ACTeyI,ACZZ,EFuBJ,IHPYzI,AKhBJkJ,CHOI,CEKIT,CCZL,GAAG,CLgBK,AEPA,CFOCxI,AKhBhB,EAAa,CLgBL,AIJa,GAAGwB,oBAAoB,CAAC,KAAKwG,eAAN,EAAuBxF,WAAW,GAACiG,CAAnC,EAAsC,KAAKR,aAA3C,CAAhC,CADC,CAED;AJIP,AEPOlI,AKKZ,AFdI,MEcDuQ,ELLSvQ,CKKN,EFdK,CEcJ,AFdH,CEcJ,AFfa,CAEb,CHQmB,AKKV,CLLWC,GAAR;AFQX,AEPQ,AKKL,AHFQ,ACXX,GL1EgB,AKuEjB,MEgBQ,AFbF,IEaMyE,AFbHwE,EDWUT,CGEN,AFbD,GEaE,CAAV,AFbU,EEaG/D,AFbR,EDWG,CGEM,CFbEwE,EEaDyH,CFbI,IAAG,GAApB,EAAwB,YEaW,CAAC/K,MAAtC,EAA8ClB,GAAC,EAA/C,EAAkD;ALJjD,ACYT,AIPY6L,AHFC,ACXL,IFoBF7I,CDtFK,CK+EC6I,EFbAxE,CEaG,GAAG4E,OFbK,GAAGzH,CFoBD,EEpBI,CFoBD,EEpBE,EAAtB,CAD0B,CAE1B,EEYgC,CJOlCxB,AIPmChD,GAAD,CAAtB,CAA0BoM,QAA1B,CAAmC7L,IAAnC,CJOU,CAAAA,AIP+BsL,GAAzC,CJOc,AIPpB,EJOuB;AHL/B,AGMA,AIPQvQ,AHFH,KAhFE,CJmFHM,AGME4E,AIPElF,OAAO,CAACC,GAAR,IPCR,CAAoBW,AGME,GAAG,EAAzB,aHNA,EAAuC,gBODc2P,GAA7C;APEJ,AEPA,ACaJ9I,AIPQzH,AFbJ,EFoBJyH,IIPQzH,EPCA,AEPA+C,ACaF,AEpBIiJ,CFoBH7G,IIPQ,CLNX,AKMYlF,CPCDW,AEPCoC,AGPC,CFoBjB,CAAe,AIPP,CAAY2N,AFbA,CAAC,IAAD,CHOhB,CGPuB,CHOD,CCaXhJ,EEpBK,CFoBF,CEpBe,CFoBX,CHNd,EKdY,EAAmB,CLcH,EODM,CAACjD,AFbvB,EAAyB,CEaH,CAAlC,CPCA,CKdY,EAA+B,CLcH9D,GKd5B,EAAqC,EAArC,EAAyC,IAAzC,EAA+C,GLcD,CKd9C,ELc+C,AKdM,CLcjE,GKdY,CLcoDA,CKdO,IAA3D,EAAiE,EAAjE,EAAqE,IAArE,EAA2E,CLcL,GAAG,AKdzE,CLc0E,CKdO,CLcjG,EAA6F,CKd7E,EACZ,IADY,EACN,IADM,EACA,IADA,EACM,IADN,EACY,IADZ,EACkB,IADlB,EACwB,IADxB,EAC8B,IAD9B,EACoC,GADpC,EACyC,GADzC,EAC8C,GAD9C,EACmD,GADnD,EACwD,GADxD,EAC6D,GAD7D,EACkE,GADlE,EACuE,GADvE,CAAhB;ALeI,AEPA,ACaJ,ACVA,ACTA,QDSIoI,ACTAiD,EHMI,CFOCnM,CIJT,ECTU,CDSA,EFHKkD,AGNFgJ,OAAO,CAACD,CHMb,CFOJ,GAAwBnL,CEPD,KGNP,CAApB,CAL0B,CHWlB,AGLR,IHKuCoC,KFOnC,IEP4C,GAAC,CAAzC,IAA8CA,SAAS,GAAG,GAA9D,EAAkE;AFQrE,AEPO,ACaRkC,AIRI,AHFA,IDUJA,CHRA,KOAOqL,AHFA,CJIF,EEPQvO,AKKH,IHFI,CGED,CAAT,CLLI,ACaQ,CAACqD,AIRF,CHFI8B,CFHInE,ECavB,CAAsB2E,CCVf,EDUkB,CAACJ,EDblB,AEGqB,QDUP,ACVlB,CDUiCtC,CCVC,GDUhB,CAAtB;AHLIjF,AEPC,ACaR,AITmB,AHDR,ACTR,GFgBJ,EAF+B,CHDvBA,AGOR,CDhBQ,IGJGiM,ELaI,AEPF,CFOGhM,CIJG,EJIX,AKbJ,GDSoBkH,KAAZ;AJKP,AEPOnH,AKGe,AHAlB,ACTR,GARK,IDeE,CFDIA,CGNP,IDSU,EFHI,CAACC,GAAR;AFQX,AEPQ,ACaT,AIVK,AHAOD,ACTRA,IAAAA,EFmBE2C,ECVM3C,GCTD,CAACC,GDSO,ACTf,CFmBY,ACVIA,GDUDiF,ACVP,gBDUuB,CAACI,MAAjB,CAAwB,UAACC,aAAD,EAAgBC,YAAhB,EAA+B;ADZrE,ACaD,ACVK,ACTL,KH3EG,MC8FID,AEnBA,CAAP,YFmBoB,GAAGC,YAAvB;AHvGa,AGwGhB,AIXG,AHCC,ACTJ,CLrFL,EGsGuB,CAAnB,CC/FO,MGsFI+K,GAAP;ALFA,ACcJ,AIXC,AFRJ,CAjBD,EEiBI,AFEJ,KHGYtN,CCcDN,AIXD,IAAG4N,GAAG,GJWZ,AIXa,CAAP,CLHF,CKGW,ELHQ;AFS3B,AERY,ACcX,AIXO,AHAA,ACNR,CFMA,EAaA,KCbYvH,CJKHnI,AOLG,CLHG,EEGP,CGAQ6D,AHAEuE,GGAD,CLHK,EKGJ,CAAV,AHAA,EFHmBhH,AKGNyC,AHAK,GGAJ,GPKtB,AOLuBkM,GPKQ,KERhB,KAA+B,QAAlC,CKGiC,CLHU,AKGThL,MAAtC,EAA8ClB,GAAC,EAA/C,EAAkD;APMtDlF,AERY,AKGJ+Q,AHAA,EJKR/Q,IOLQ+Q,GAAG,CHAC,EGAEA,EPKF,CAACxQ,AERM,AKGF,EHAEkJ,CGAC2H,ELHI3O,CFQxB,GAAoBnB,AILR,KAAiB,KJKC,AERlB,CFQmBC,EILvB,EAA8B,CGAI,CPKL,AOLM2D,CPKL1D,EOLI,CAAtB,CAA0B+P,UPKf,CAAsB9P,EOLjC,CAAwCsP,GAAxC,CPKW,AOLvB,CPKqD,YAA9B,CAAD,EAA6C,EAA7C,CAA9B;AACAvQ,AERS,AKGDA,AHAI,EJKZA,IOLQA,CLLA,EFUD,CAACC,GAAR,AERe,AKGA,AHAEkH,CGADlH,GAAR,CHAI,GAAagJ,OAAb,8BGAyCsH,CPKH/Q,EOL1C,UPKsD,CAACO,MAA/D;AACAP,AERYQ,ACchBsB,AIXYtB,AHAC,EJKTR,EKbE0M,EFmBA,AIXMlM,CJWLuB,ACbK,CFDIvB,KKGG,AHAF,CJKD,AGMhB,AIXoBC,CPKHC,AERM,CAACD,CCcPyH,AIXL,CAAYkJ,CLHR,KFQZ,GAAuB9P,SGM3B,CHNqC,CAACC,EOLQ,CAAC2D,GPKH,AOLE,CPKD1D,AOLjC,cPK0B,CAAsBC,OAAtB,CAA8B,WAA9B,CAAD,EAA4C,EAA5C,CAAjC;AACAjB,AERS,AEGGA,ACRZ,ELaAA,MILYA,CJKL,CAACC,GAAR,EILmB,CAACA,GAAR,UCRA+I,IAAZ,EAAqE,2BLahBxJ,YAAY,CAACU,SAAlE;AACAV,AERK,AKEG,AHCC,ACT4D,ELcrEA,GEhGO,GGkFWgG,EEQP+K,GAAG,CPMF,CAACpQ,GONI,CAAT,CFR6D,CEQlD,OPMnB,GAA2BW,UAAU,CAACC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,CAA8B,aAA9B,CAAD,EAA8C,EAA9C,CAArC,AKd+B,CAAsC;ALerEjB,AOPoB,AHEf,ACVgE,ELerEA,GInGO,GCoF2BD,CLe3B,CAACE,GAAR,CKfqE,mDLebT,YAAY,CAACW,OKf5BX,MLezC,MKfqD,CAACO,MAAe;ALgBrEP,AETI,AKCuB,AFR0C,ELgBrEA,METQyD,AGPsDkJ,KAAO,CLgBzD,CAAC/L,METT,CAAmB8C,MFSvB,CETI,EFSuBhC,AETI,QFSI,CAACH,MAAM,CAACC,cAAP,CAAsBC,OAAtB,CAA8B,gBAA9B,CAAD,EAAiD,EAAjD,CAAnC;AACAjB,AETQ,AKCH,AHED,EJMJA,OAAO,CAACC,AETI,GFSZ,IETmBiD,OAAP,KAAiB,QAAjB,IAA6BA,OAAO,GAAC,IAArC,IAA6CA,GFSJ1D,IETW,GAAG,IAA3D,CFSyD,CAACY,AETM,aFSxE;AACAZ,AETY,AEGR0J,ACZiE,ELkBrE1J,EINI0J,GAhGG,MF6FUjH,CFSL,CAAC5B,YETD,GAAsB6C,CFSlC,GAA8BpC,GETlB,OFS4B,CAACC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,CAA8B,cAA9B,CAAD,EAA+C,EAA/C,CAAxC;AACAjB,AETS,AKAL,AH9FG,EJuGPA,KEXQ,EFWD,CAACC,COTGsQ,EPSX,AETa,CKAT,+CPSgD/Q,YAAY,CAACa,gBAAjE;AACAb,AETYQ,AKAX,AH/FM,ACqFH,ELmBJR,COjBM,KLQMQ,CKAP,KPSO,CAACM,AETM,CAACL,GAAR,WFSZ,GAA6Ba,UAAU,CAACC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,CAA8B,YAA9B,CAAD,EAA6C,EAA7C,CAAvC;AACAjB,AETS,AKALA,AHhGG,ACsFH,ELmBJA,EOTIA,KPSG,AKnBEmH,CLmBDlH,COTG,CAACA,CPSZ,CKnBI,CEUA,EFVa+I,IAAb,iDLmByDxJ,YAAY,CAACc,eAA1E;AACAS,AETK,AKAJ,AFVG,ELmBJA,GExGO,GFwGD,CAACC,AKnBEoL,aAAL,CLmBJ,CAAsBjL,CKnBCqE,MLmBvB,CAA8B,KKnB1B,CAHiE,CAIjE,aLkBJ,EAAoD,CAApD;AACH,AOTA,AHlGU,CG6EX;ALqBQ,AElGG,ACyFH,QHSIrC,CGTC1D,OHSL,AGTA,GHSc,AGTCM,MAAf,CALiE,CAMjE;ALmBR,AEVY,AKCZ,AHpGW,IJ6GRmB,AOTG8P,MLDS,EFUJ,CAACjQ,EOTK,ELDK,CKCF,CPSF,CAACC,EEVQkB,KKCrB8O,ILDS,GFUH,CAAsB/P,CEVO,EKCrB,CAACgE,GPST,CAA8B,AOTtB,CLDR,CKCesL,CLDuB,EKC9B,EAAc,SPStB,CAAD,EAAkD,EAAlD,CAAR,GAA8D,CAAjE,EAAmE;AAC/DxP,AEVY,AKCZ,AFVI,ELmBJA,KOTI,CPSE,CAACK,AKnBEiL,EEUD3H,GAAC,CLDU,AGTf,EEUM,CAAV,AFVkByH,EHSMjK,AKCXwC,GAAC,AFVV,CAPiE,CL0BrE,AKlBI,CLkBoB,AOTToJ,GLDH,GFUZ,EAAgCjN,IOTL,CAAC+E,MAA5B,EAAoClB,GAAC,EAArC,CPSA,COTwC;APUxC,AEVS,AKCL6L,AHtGG,IGsGHA,GLHI,AKGD,GAAGA,GLDK,AKCF,GAAGzC,YAAY,CAACpJ,GAAD,CAAZ,CAAgBuM,MAAhB,CAAuBhM,IAAvB,CAAZ;ALAQjF,AKCRA,AHvGG,AC6FH,IEUAA,ILDQA,CGTHsM,EEUE,CAACrM,GLDO,AKCf,CLDgBA,AENZgF,GFMI,CEtGL,AC6FH,EDGS,CCHU2G,gBAAgB,CAACvC,EEULkH,GAA/B,WFVmC,EAAmB,KAAKpE,KAAxB,CAAnC;AHUK,AKCR,AHPO,ACHP,IACD,MDEczD,CAAC,GAAG,IAAId,IAAJ,GAAWe,WAAX,EAAV;AJgBR,AETK,KAtGE,CF+GDtH,cAAc,GAACH,QAAQ,CAACH,MAAM,CAACC,cAAP,CAAsBC,OAAtB,CAA8B,gBAA9B,CAAD,EAAkD,EAAlD,CAAR,GAA8D,CAAnF;AACAF,AOTA,AHPQ,EJgBRA,KOTI,CPSE,CAACC,CIhBIiE,CGOHP,GAAC,AHPM,GGOL,AHPMgE,CGOhB,AHPW,EGOEhE,EHPMO,CJgBnB,AOTc,CPSQ9D,EOTPkO,AHPQ,GAAC,EJgBxB,CAA8B,CIhBtB,EAAqB,IGOD,CAACzJ,MAA7B,EPSA,AOTqClB,EPSWrD,COTV,EAAtC,EAAyC,SPSzC;AACH,AEVO,AKCAkP,AHPQvQ,CJUhB,GOHQuQ,GPSH,AOTM,CLDCpN,AENInD,EGOFuQ,GAAG,EHPM,CFMf,AKCYlB,AHPIpP,CFMFiD,EENN,KFMR,EAAsB,GKCG,CAACwB,GAAD,CAAb,CAAiBuM,MAAjB,CAAwBhM,IAAxB,CAAZ;APUJjF,AEVQ,AKCJA,AHPK,EJgBTA,EOTIA,GHTI,EJkBD,CAACC,AEVI,CKCD,CAACA,CPSZ,AIhBa,EGOT,ELDeiD,OAAP,KAAiB,QAAjB,IAA6BA,CKCNqN,GAA/B,GLD4C,IAAE,KAAKtO,cAA3C,IAA6DiB,OAAO,GAAG,IAA3E,EAAgF;AFW3F,AEVe,AKCX,AHPWgG,EJmBhB,MInBgBA,GAAG,EFMEhH,CENE+C,IAAI,GAACyD,CFMZ,AENM,GFMWxF,AENF,ECLrB,GDK0B8E,EFMpB,EENA;AFOH,AENG,ACLR,OHSI,IGTCxC,EHWI,EENM0D,GAAP,KCLR,GAAoBzH,oBAAoB,CAAC,KAAK+D,YAAN,EAAoB,CAApB,EAAuB,KAAKzF,MAA5B,CAAxC;AHYQC,AKAZ,AHNS,ACLJ,QHWOA,CKALuQ,GAAP,GLAmB,CAACtQ,GAAR;AFYhBqB,AEXa,AKAZ,AHNQ,CGJT,IHpGW,CJyHL,CAACC,OAAP,GAAiB/B,YAAjB;AEVS,KA7GE;AK8GX,AHPQ,IGOF0R,IHPMtI,QGOM,GAAG,KFbP,EDMN,EGOFsI,CHP0B,WGOX,GAAK;ALAlB,AKCJ,AHPQ,ACNJ,OEaA,CLDI9N,EENG,ACNJ,CEaCsB,GAAC,GAAC,AHPQ,ACNJ,CEad,EAAaA,CLDT,CENmB4D,ACNJnB,CEaL,CLDS,EKCR2G,CFbR,KAAsB,MEaF,CAAClI,CFbxB,CDMO,CCN2B,GEatC,CHP+C,CGOXlB,GAAC,EAArC,EAAwC,AHPhC,EAAgD;AFOhD,AKCJoJ,AHPQ,ACNJ,IEaJA,MLDO,KENQ,ACNJ,CEaC,CLDE,AKCDpJ,GAAD,AHPQ4D,ACNJnB,CEahB,CLDmBhF,AKCHP,GFbZ,CEaJ,ULDO,GENC,EFM8B,QAAlC,EAA2C;AACvC,AKCX,AHPQ,ACNJ,ODIG,ACNJ,MDQW,ACNJ,EHYQ,KAAKO,cAAZ;AACH,AENGnC,ACNJA,OHUA,CEJIA,ACNJA,KHYO,EENI,ACNJ,CDMKC,ACNJA,GDMJ,ACNJ;AHaID,AKAZ,AHNS,ACNJ,OEYD,CLAQA,GKAJ0E,GAAC,CLAU,CAACzE,CKAV,CAAV,CLAY,CKACyE,GAAC,GAAC2K,aAAa,CAACzJ,MAA7B,EAAqClB,GAAC,EAAtC,EAAyC;ALChC,AKAL2K,AHNC,ACNJ,IEYGA,CHrHG,YGqHU,CAAC3K,GAAD,CAAb,CAAiB9C,IAAjB;ALCC,AKAJ,KLpHM,iBGwGGqH,SAAQ;ADMd,ACLA,QDKIL,ECLA,OAAOK,OAAP,EDKJ,CAAwBzF,ECLH,KDKrB,EAAgC,CCLhC,EAA8B;AHY9B,AKAJ,AHNQ,ACLA,OEWJ,CLAIJ,EENI,CGMJsB,EFXKyC,CEWJ,GAAC,AHNS3D,CGMnB,AFXQ,EEWKkB,CLAT,AGXiBuE,CHWE5F,CKAT,CHNF,EGMGsK,EFXP,CDKqB,CFMzB,EAA4B,KENpB,IAA6BnK,GGMR,CAACoC,GHNc,GGMhD,CHNkD,CGMRlB,AHN9B,GGM+B,CHNYyE,CGMvD,EAA8C,IHNgB,IAAE,EAAxD,EAA2D;AFO3D,AKAJwE,AHNQ,ACLP,IEWDA,GFbA,GHaQ,GENKrF,ACLR,IHWUjF,KKAG,CAACqB,ELAX,CKAU,CAAlB,CAAsB9C,ELAI,EKA1B,AHNQ,GAA2B4B,GFM3B,IAA8BH,AEN9B,QFMsC,GAAC,CAAvC,IAA4CA,QAAQ,GAAG,CAAC,EAA5D,EAA+D;AAC3D,AKAX,AHNQ,ACLDrD,ODGA,CCHAA,KHWSmC,AENJ,ECLE,CAAClC,GAAR,QHWI,GAAsBoD,QAAtB;AACH,AKAZ,AHNerD,ACLP,CECT,MLQY,CEJIA,KFMC,EENM,CAACC,GAAR;AFOAD,AENH,ACLR,QHWWA,OAAO,CAACC,GAAR;AACH,AKAb,AHNS,IGMHkR,CH5HK,YG4HQ,GAAG,SAAhBA,aAAgB,CAAAlM,IAAI,EAAG;ALCpB,AKAL,KL3HO,CK2HJoK,aAAa,CAACzJ,MAAd,GAAqB,CAAxB,EAA0B;AACtB,AHPA,QAAIwD,CGOA,IAAI1E,GAAC,GAAC,CAAV,AHPA,EGOaA,CHPK,CCNJ,CEaA,GAAC2K,aAAa,CAACzJ,MAA7B,EAAqClB,GAAC,EAAtC,EAAyC;ALAzC,AKCI2K,AHPA,ACNJ,MEaIA,ELDA/L,EENG,ACNJ,ODMW,ACNJ,CHYV,CKCiB,CAACoB,CLDF,CENG6D,ACNJ6D,CEaE,CAAb,CAAiBgF,UHPd,ACNJ,GEaC,CAA+BnM,CHPE,ACNJ,GEa7B,EADqC,CAErC,EHRA,ACND,EDM2C,ECND,KAAKmH,aAAL,IAAoB,CAAjE,EAAmE;AHa/D,AENI,ACNJ,UHYG,KENQ,ACNJ,EHYG,GENM7D,ACNJ6D,EHYGhK,WAAZ,AENC,ACNJ,KHY+B,QAA/B,EAAwC;AACpC,AKCP,AHPI,ACNJ,ODIG,ACNJ,MDQW,ACNJ,EHYQ,KAAKA,WAAZ;AACH,AKCR,AHPWpC,ACNJA,GEQR,ILEQ,CEJIA,ACNJA,CEaH,ILDU,EENI,ACNJ,CDMKC,ACNJA,GDMJ,ACNJ;AHaID,AKCRA,AHPK,ACNJ,IEaDA,ILDQA,GKCD,CAACC,GLDO,AKCf,CLDgBA,GAAR;AACH,AKCR,AHPI,ACNJ,KDvHM;AFoIF,AKCR,CATD,IL1HW,iBGsHWsM,iBAAgB;ADM9B,ACLA,QDKInD,ECLA,OAAOmD,GDKX,CAAkB/I,OAAlB,EAA0B,ECLtB,KAAyB,QAAzB,IAAqC+I,eAAe,IAAE,CAAtD,IAA2DA,eAAe,GAAG,UAAjF,EAA4F;AHY5F,AKER,AHRY,ACLA,IEaN8E,ILFM/N,EENI,GCLC8I,IDKM5I,CFMf,CAAgBjD,KKEE,AHRV,ECLJ,CEaiB,CLFrB,CENyB,ACLAgM,CHWC,MKE5B8E,CHRU,IAA6B7N,GCLjC,IDKwC,IAAE,CAAtC,GGQa,CAAAyB,AHR8BkE,IGQ1B,EAAG,CHR8B,IAAE,EAAxD,EAA2D;AFO3D,AKER,AHRY,ACLP,MEaCT,CAAC,AFfH,GHaQ,AKEF,GHROH,ACLR,CEaKX,GLFKrH,CKET,GAAWoI,KLFT,AENA,GAAqBnF,EFMF,CKErB,EAAV,EHRY,GFMA,IAA+BjD,SAAS,GAAC,CAAzC,IAA8CA,SAAS,GAAG,CAAC,EAA/D,EAAkE;AAC9D,AKEZ,AHRS,ACLDP,MEaJuQ,CHVI,CCHAvQ,CEaR,ILFiBoC,AENJ,ECLE,CAACnC,GAAR,KHWI,GAAmBM,SAAnB;AACH,AENGP,ACLP,OHSG,CEJIA,KFMC,EENM,CAACC,GAAR;AFOAD,AKCZ,AHPS,ACLR,OEYG,CLDQA,GKCJ0E,ILDW,AKCV,CLDWzE,EKCVyI,CLDE,AKCZ,EAAahE,IAAC,IAAEO,IAAhB,EAAsBP,IAAC,EAAvB,EAA0B;ALAjB,AKCL1E,AHPC,IGODA,OAAO,CAACC,GAAR,gBAAoByE,IAApB;ALAC,AKCD6L,IAAAA,CL1IG,EK0IA,GAAGL,YAAY,CAACxL,IAAD,CAAlB;AACA1E,AH7IG,GAAP,CG6IIA,OAAO,CAACC,GAAR,SFdM,4BEcmCsQ,GAAzC;ALDA,AKEAY,AHRP,ACNO,CDjIR,EAyIA,CGMQA,ILFI5N,EGZD,OEcU,AFdH,CEcImB,IAAD,AFdE8H,CEcf,IFdG,CHYH,GAA0B,CGZD,QAAzB,EAAkC;AHa9B,AKEJ+D,AFdI,IEcJA,GAAG,GLFI,AKEDS,KFdK,EHYG,GGZExE,CEcC,CLFEnK,AKEDqC,GFdd,CEca,EAAI6L,GAAJ,CAAjB,WLFO,KAAsC,QAAzC,EAAkD;AAC9C,AKERvQ,AFdC,IEcDA,GFhBA,IEgBO,CAACC,CFdD,EHYQ,AKEf,KLFoBoC,qBAAZ,cKEoCkO,GAA5C;ALDK,AKELA,AHRR,ACNYvQ,IEcJuQ,AHRJlH,GFIQ,AKID,CFdCrJ,EEcE6Q,GLFK,EGZA,CAAC5Q,GAAR,CDMQ,GAAG,EAAvB,MGQmC,CAACyE,IAAD,EAAI6L,GAAJ,CAA3B;ALDQvQ,AKERA,AFdC,IEcDA,ILFQA,GKED,CAACC,GLFO,AKEf,CLFgBA,GAAR,wCKEwCsQ,GAAhD;ALDK,AKELW,AHRR,ACNK,IEcGA,KHRC5H,OGQW,WHRpB,GAA8B;AFOrB,AKEDtJ,AHRJuJ,EAAAA,EGQIvJ,CLlJG,MKkJI,CAACC,GAAR,CAAY6N,AHRF,GAAC5M,GCNLuL,KDMa,CGQnB,AHRoB1L,GCNN,GDMY,CAACC,cAAP,CAAsBC,OAAtB,CAA8B,KAA9B,CAAD,EAAuC,EAAvC,CAAvB;AGSIjB,AHRJ,ACNI,IEcAA,EHREwJ,ICNE,CEcG,CAACvJ,GAAR,CAAYoP,CHRC,ACNF5C,GDMKjI,IAAI,ACNhB,CDMiBC,IGQrB,AFdqB,CDML,CAAW1D,MAAM,ACN7B,CDM8BC,GCNDyL,OAAO,GAAC,CDMd,ACNvB,CDM6CxL,GCNHwL,IDMnB,CAA8B,ECNJ,GAAC,CAAtD,EAAwD,KDM7B,CAAX,CAApB;AFMI,AKGAzM,AHRJ,ACNQ,IEcJA,EHRA0G,EFKInD,GKGG,AHRF,CGQGtD,CFdCuM,CDMH,CGQN,CAAYmB,AHRhB,ECNQ,GAAalB,OHWjB,AGXI,CHWsBjJ,KKG1B,ELHA,EAAkC;AAC9B,AKGP,AHRD,ACNK,MDMD0F,CCRA,EDQG,CFKK,EELJ,CCNC,CDMT,GFKmB1F,OAAP,KAAiB,QAAjB,IAA6BA,OAAO,GAAC,CAArC,IAA0CA,OAAO,GAAG,CAAxD,EAA0D;AACtD,AELZ,ACNQxD,MDMJyJ,ECNIzJ,KHWSqC,EGXF,CAACpC,GAAR,CDMU,GAAC,EAAnB,SFKY,GAA6BuD,OAA7B;AACH,AKET,AHPA,ACNK,MDMDkG,CFGI,EKID6G,GAAP,CLFa,KELG,GAAC,EAAjB;AFMYvQ,AKEf,AHPG,ACNC,CELL,KHWQ2J,EFKQ3J,OAAO,CAACC,GAAR,AELK,GAAC,CAAC,EAAD,EAAI,EAAJ,CAAlB;AFMS,AELT,MAAI2J,eAAe,GAAC,EAApB;AFMK,AKET,AHPI,IGOA0H,CLzJO,CEkJHzH,MGOI,AHPE,GGOC,AHPA,EAAX,EGOJ,EACA;AACA,AHRI,MAAIT,YAAY,GAAC,EAAjB,CCRY;AHaR,AEJJ,ACRI,MDQAU,EFIIrG,EGZD,ODQQ,ACRD,GDQE,CAAC,CCREhE,CDQH,EFIZ,AEJgB,EAAJ,CFIW,AEJ3B,CCRO,KAAwB,QAA3B,EAAoC;AHahC,AKGZ8R,AFfY,OEeL,GLHQ,AKGLF,KFfS,EHYG,GGZE5R,EHYG6C,KGZf,GEekB,CAACgP,QAAD,CLHf,AKGf,KLHkD,QAAtC,EAA+C;AAC3C,AKGhBtR,AHPI,ACRK,OEeF,AHPC,ACVA,CEiBAC,GAAR,AHPYyE,EAAC,ACRE,EHYQ,CEJT,CAAV,EAAaA,CFIWpC,CEJV,GAACiH,cFIH,AEJZ,EAA+B7E,EAAC,EAAhC,EAAmC,EGOE6M,OAAzC,IACA;ALHa,AKIb,AHRQ7K,ACRI1G,IDQJ0G,GFEI,CGVA1G,CDQC,CAAC0E,EAAD,CFIM,AEJX,ECRW,CDQF8E,ACRGvJ,GAAR,QDQgB,CAACyE,EAAD,CAAX,CAAe,CAAf,CAAT;AFKQ1E,AEJRkJ,ACRC,IDQDA,GAAG,CFIKlJ,AEJJ0E,EAAD,CAAH,GAAO8E,CFIQ,CAACvJ,GAAR,MEJU,CAACyE,EAAD,CAAX,CAAe,CAAf,CAAP;AFKK,AKIb,AHRQ+E,ACRH,IEgBCf,AHREe,CGQD,GAAG,IAAI7B,IAAJ,EHRY,CGQDe,AHREjE,EAAD,CAAd,GAAkB8E,KGQhB,EAAV,IHRqC,CAAC9E,EAAD,CAAX,CAAe,CAAf,CAAlB;AFKC,AKIT,AHRQgF,IGQF8H,AHRE9H,CF1JG,GKkKD,GAAG,EAAb,GHRoB,CAAChF,EAAD,CAAZ,ECRQgI,CDQQlD,UCRE,CDQS,CAAC9E,EAAD,CAAX,CAAe,CAAf,CAAhB;AACAiF,ACRA,IDQAA,MCRI,ODQS,ACRF+C,CDQGhI,EAAD,CAAb,CAAiB,CAAjB,GCRI,CDQgB8E,ICRG,ODQQ,CAAC9E,ACR5B,EDQ2B,CAAX,CAAe,ACRAgI,CDQf,CAApB,OCR4C,GAAC,CAAzC,IAA8CA,SAAS,GAAC,EAA5D,EAA+D;AHY/D,AKIR,AHPQ/C,ACRI,IDQJA,CGOJ,GLJQlG,CKIJiB,IAAC,AFfQjF,GEePiJ,CAAV,AHPqB,CAAChE,CGOTA,CHPQ,ACRT,CDQJ,CAAiB,CGOX,AHPN,ACRmBgI,EHWnB,CAAuBhJ,CKIf4N,AHPY9H,KCRhB,GEeZ,CLJQ,CKIkB9E,CLJgB,AEHH,CAACA,EGOb,AHPY,CAAX,CGO5B,AHP2C,CAAf,CGOE,AHPtB;AFII,AKIR8M,AHPI5H,ACRC,EEeL4H,EHPI5H,EGOA,CAAClF,AFjBD,GHaQ,CKIN,EFfG,CEeFgE,CAAH,CAAJ,CLJmBhF,EKITwM,AHPS,CAACxL,EAAD,CAAf,GAAmB8E,CFGX,IKIU,CLJU,AKIT9E,IAAD,CAAtB,AHPkC,CAACA,EFGvB,AEHsB,CAAX,CAAe,CAAf,CFGqBhB,AEHxC,UFGkD,GAAC,CAA3C,IAAgDA,UAAU,GAAG,CAAjE,EAAmE;AAC/D,AKIf,AHPOmG,ACRI7J,IDQJ6J,ICRI7J,EDQE,CAAC0E,EFGMpC,AEHP,CAAN,CCRW,CAACrC,CDQFuJ,ECRN,SDQiB,CAAC9E,EFGd,AEHa,CAAX,CAAe,CFGShB,AEHxB,CAAV,SFGQ;AACH,AEHL0F,ACRC,IDQDA,GFCI,MAEK,GEHG,CAAC1E,EAAD,CAAZ,GAAgB8E,WAAW,CAAC9E,EAAD,CAAX,CAAe,CAAf,CAAhB;AFIQ1E,AKGhB,AHNK,ACRA,IEcCyR,ILHUzR,IKGF,GLHS,AKGNwR,CLHOvR,GAAR,AKGK,CAACqF,MAAL,CAAY,UAACC,aAAD,EAAgBC,YAAhB,EAA+B;ALF/C,AKGT,SAAOD,aAAa,GAAGC,YAAvB;ALFK,AKGR,AHNGxF,CGIa,CAAjB,AHJIA,GFlKO,IEkKA,CAACC,GAAR,gCAAoCuJ,WAApC;AGQJxJ,AHPIA,EAAAA,KGOG,CAACC,CHPG,CAACA,CGOZ,CAAYuR,CHPR,GGOJ,QFjBe,mBDUuBjI,cAAlC;AFGI,AKKRvJ,AHPIA,ACVI,EDUJA,KGOG,CLLK2D,AKKJ1D,CHPG,CAACA,ACVD,CEiBX,EHPI,ICVc,EHYV,GAAiB,AGZFoM,MAAZ,KAAuB,QAA1B,EAAmC,EDUH3F,KAApC,OGO8C+K,QAAlD;ALJY,AKMZC,AHRI1R,ACVQ,EDURA,KGQG,EHRI,CFEI,AKMLwP,AHREvP,GAAR,ECVe,EHYG,GGZEoM,EHYG9J,IGZf,CEkBe,CAAC+O,MLNb,EKMY,CAA3B,ELN4C,MEFJpI,EFE5B,CEFR,CFEiD;AACrC,AKMhBlJ,AHRIA,ACVK,EDULA,KGQG,AFpBC,CEoBAC,CHRG,CAACA,CGQZ,EHRI,ACVW,EHYQ,KAAKsC,YAAZ,EKMWmP,OAA3B,iBHRqDjI,cAAjD;AFGS,AKObkI,AHTI3R,ACVQA,EDURA,KFAQ,CKSJ,AFnBIA,CDUD,CAACC,CGSDyH,ELPQ,AEFf,ECVe,CAACzH,GAAR,WEmBkB,CAACqR,QAAD,CAA9B,aHTgD5H,YAA5C;AFGY1J,AKOhBA,AHTIA,ACVK,EDULA,KGSG,CLPSA,AKORC,CHTG,CAACA,CGSZ,EHTI,EFEmB,CAACA,GAAR,iBKOa0R,QAA7B,WHTkDhI,aAA9C;AFGS,AKQbiI,AHVI5R,ACVC,EDUDA,MGUI,CHVG,CAACC,CGUD6P,EHVP,SGUkB,CAACwB,QAAD,EAAW3B,WAAX,EAAwBC,WAAxB,AHV8BhG,EGUOiG,YAArC,CAAtB,AHVI;AFGK,AKQT7P,AHVIA,EAAAA,GF1KO,EKoLJ,CAACC,CHVG,CAACA,CGUZ,EHVI,SCVW0M,UAAS,IEoBKiF,QAA7B,IHV2C/H,MAAvC;AGYJgI,AHXI7R,ACVI,EDUJA,OAAO,CGWD,AHXEC,ACVA,GEqBC+E,AHXT,ICVe4H,QAAP,KAAkB,MEqBM,CAAC0E,CFrB7B,EAA+B,KEqBH,CAApC,QHXiDlI,YAA7C;AFEI,AKURpJ,AHVI,ACXQ,MDWF+J,CGUH,CLVKpG,AKUJ1D,GAAR,EFrBiBoM,EDWE,GAAG7H,CFAd,AGXI,CHWaZ,EEAC,ACXA+I,CDWClI,EFAnB,EAAuB,CEAT,CAAW1D,CCXrB,KDW2B,CAACC,EGUT6Q,UAA/B,EHViC,CAAsB5Q,OAAtB,CAA8B,WAA9B,CAAX,CAAlB;AFCQ,AKWZ6Q,AHXIhI,ACXK,EDWLA,KCbI,GHaQ,GEAD,ACXF,GDWGC,CFAOnG,KAAP,AKWM,GAAG6B,AHXrB,EFA2B,QAAf,IAA2B7B,KAAK,GAAC,CAAjC,IAAsCA,EKWA,CAAC0N,ELXI,GAAG,CAAC,EAAnD,AKW0C,CAAtD,CLXkE;AAClD,AKWhBtR,AHXIA,ACXQA,EDWRA,KGWG,CAACC,AFtBID,CDWD,CAACC,CGWZ,ELXqBsC,AEAjB,ECXe,CAACtC,GAAR,MHWI,GAAoB2D,GKWZkO,ELXR,iBEA6BhI,GGW7C,QHXI;AFCS,AEAT/I,ACXK,EDWLA,KFFQ,CEEF,CAACC,IFAM,UEAb,CAAsBG,OAAtB,CAA8B,mBAA9B,EAAmD,CAAnD,EAvC0B,CAwC1B;AFAYnB,AGXX,QHWWA,OAA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,IAAD,EAAO,IAAP,CAAd,CAArB;AFFC,AEGD,AC1BQ,CHrLR,EA8MA,CECIC,MC1BOuC,CD0BA,GAAG,CAAC,CAAD,AC1BG,ED0BC,EC1BC,CD0BL,AC1BN,CD0BR,CC1BqB;AD2BrB,AC1BY,ID0BRtC,SC1BajF,ID0BA,GAAG,CAAC,CAAD,EAAI,CC1BZ,GD0BQ,CAApB,AC1BiCuH,MAArB;AACA,eAAO,CAAP;AHwBZ,AEGA,AC1BS,IHuBL/I,AEGE0G,GC7BE,MAGK,OHuBO,EEGI,CFHD,EAAvB,AEG2B,EFF3B,OEEMA,kBAAqB,CAAAzF,IAAI,EAAG;AFDlC,AEEI,AC1BQjF,MD0BF2K,EC1BE3K,OAAO,CAACC,GAAR,CAAY,ID0BI,GAAG,EAA3B,CAD8B,CAE9B,8CC3BQ;AHyBZ,AGxBS;AD2BLoJ,AC1BC,ED0BDA,gBAAgB,CAAClE,OAAjB,CAAyB,UAAAyF,MAAM,EAAI;AFFvC,AEGQD,IFHJ1G,AEGI0G,kBAAkB,CAACtF,EFHF,EEGjB,CFHoB,AEGIuF,EFHhC,IEGsC,CAACpC,YAAP,CAAoBvD,IAApB,CAAxB;AACH,GAFD,EAH8B,CAM9B;AFHJ,SAASf,mBAAT,GAA+B,GGzBb6I,QAAO;AH0BrB,AEGA,AC5BI,MHyBA5I,AEGE0G,IC5BCkC,MAAM,ED4BK,CC5BJ,CHyBd,AGzBI,CD4BiBpC,CC5BL,iBD4BuB,CAACrF,MAAnB,CAA0B,UAACC,aAAD,EAAgBC,YAAhB,EAA+B;AFF9E,AEGI,AC5BIxF,MHyBJoE,EGzBIpE,GD4BGuF,IC5BI,CAACtF,GAAR,CHyBU,AGzBE,GHyBD,CEGK,CFHxB,EEG2BuF,YAAvB,2CC5BI;AH0BR,AEGC,AC5BI,GD0BgB,CAArB,EFDInB,CG3BA,CAGA,YHwBc,GAAC,EAAnB;AACA,AEGA,AC/BI,MH4BAC,GEGGuG,EC3BE,IAAG,CAACkC,EHwBG,GAAC,AEGjB,CC3BY,CHwBZ,GGxBqB,KAAKvH,YAAjB,EAA8B;AHyBvCrB,AEGH,AC3BW,CDgBZ,CFQIA,CEKJ,WC7BgB6I,EHwBE,GAAC9L,OGxBS,CHwBD,CAACH,CGxBG,KHwBG,AGxBEyE,CHwBD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","file":"life.f8038986.js","sourceRoot":"..","sourcesContent":["//This object is exported from this file and imported to most other files.  The idea is that there are default values used across the application.  \r\n//The user would in general be able to modify these values from a simple UI or just accept the defaults\r\n//Each value has a getter and setter method associated with it\r\nconst rateDefaults = {\r\n    //growth is used as the default value for the annual growth of money in any year.  The value is considered without considering inflation, whihc is separately deducted \r\n    _growth: .05,\r\n    //inflation rate is used to deduct against regular growth to keep all income/money value in today's dollars.  Income is discounted while costs are not and remain in 2020 dollars\r\n    _inflation: .02,\r\n    //real estate tax rate is used to determine total cost of homeownership-realEstateTax*home value.\r\n    _realEstateTax: .02,\r\n    //This is the default length of a home loan and can be changed for any specific home/loan\r\n    _mortgageYears: 30,\r\n    //This is the default interest rate of a home loan and can be changed for any specific home/loan\r\n    _mortgageInterest: .035,\r\n    //This is the assumed rate of annual home value growth.  This value does not account for inflation, but inflation is discounted when this value is used in any formula\r\n    _homeValueGrowth: .03,\r\n    get growth() {\r\n        if(typeof this._growth === 'number'){\r\n            return this._growth;\r\n        } else {\r\n            console.log(`Enter valid number for growth rate`);\r\n        }\r\n    },\r\n    get inflation() {\r\n        if(typeof this._inflation === 'number'){\r\n            return this._inflation;\r\n        } else {\r\n            console.log(`Enter valid number for inflation rate`);\r\n        }\r\n    },\r\n    get realEstateTax() {\r\n        if(typeof this._realEstateTax === 'number'){\r\n            return this._realEstateTax;\r\n        } else {\r\n            console.log(`Enter valid number for real estate tax rate`);\r\n        }\r\n    },\r\n    get mortgageYears() {\r\n        if(typeof this._mortgageYears === 'number'){\r\n            return this._mortgageYears;\r\n        } else {\r\n            console.log(`Enter valid number for years of mortgage`);\r\n        }\r\n    },\r\n    get mortgageInterest() {\r\n        if(typeof this._mortgageInterest === 'number'){\r\n            return this._mortgageInterest;\r\n        } else {\r\n            console.log(`Enter valid number for mortgage interest rate`);\r\n        }\r\n    },\r\n    get homeValueGrowth() {\r\n        if(typeof this._homeValueGrowth === 'number'){\r\n            return this._homeValueGrowth;\r\n        } else {\r\n            console.log(`Enter valid number for home value growth rate`);\r\n        }\r\n    },\r\n    set growth(newGrowth){\r\n        if (typeof newGrowth==='number' && newGrowth<1 && newGrowth > -.5){\r\n            this._growth = newGrowth;\r\n        }else{\r\n            console.log(`Enter valid number for growth rate`);\r\n        }\r\n    },\r\n    set inflation(newInflation){\r\n        if (typeof newInflation==='number' && newInflation<1 && newInflation > -.5){\r\n            this._inflation = newInflation;\r\n        }else{\r\n            console.log(`Enter valid number for inflation rate`);\r\n        }\r\n    },\r\n    set realEstateTax(newRealEstateTax){\r\n        if (typeof newRealEstateTax==='number' && newRealEstateTax<1 && newRealEstateTax > 0){\r\n            this._realEstateTax = newRealEstateTax;\r\n        }else{\r\n            console.log(`Enter valid number for real estate tax rate`);\r\n        }\r\n    },\r\n    set mortgageYears(newMortgageYears){\r\n        if (typeof newMortgageYears==='number' && newMortgageYears<100 && newMortgageYears > 0){\r\n            this._mortgageYears = newMortgageYears;\r\n        }else{\r\n            console.log(`Enter valid number for years of mortgage`);\r\n        }\r\n    },\r\n    set mortgageInterest(newMortgageInterest){\r\n        if (typeof newMortgageInterest==='number' && newMortgageInterest<1 && newMortgageInterest > 0){\r\n            this._mortgageInterest = newMortgageInterest;\r\n        }else{\r\n            console.log(`Enter valid number for mortgage interest rate`);\r\n        }\r\n    },\r\n    set homeValueGrowth(newHomeValueGrowth){\r\n        if (typeof newHomeValueGrowth==='number' && newHomeValueGrowth<1 && newHomeValueGrowth > -.5){\r\n            this._homeValueGrowth = newHomeValueGrowth;\r\n        }else{\r\n            console.log(`Enter valid number for home value growth rate`);\r\n        }\r\n    }\r\n\r\n}\r\n\r\nfunction insertDefaultValues (){\r\n    rateDefaults.growth=parseFloat(window.sessionStorage.getItem('growthRate'),10);\r\n    console.log(`global defaults growth rate is now ${rateDefaults.growth}`);\r\n    rateDefaults.inflation=parseFloat(window.sessionStorage.getItem('inflation'),10);\r\n    console.log(`global defaults inflation rate is now ${rateDefaults.inflation}`);\r\n    rateDefaults.realEstateTax=parseFloat(window.sessionStorage.getItem('propertyTax'),10);\r\n    console.log(`global defaults property tax rate is now ${rateDefaults.realEstateTax}`);\r\n    rateDefaults.mortgageYears=parseInt(window.sessionStorage.getItem('mortgageLength'),10);\r\n    console.log(`global defaults mortage length is now ${rateDefaults.mortgageYears}`);\r\n    rateDefaults.mortgageInterest=parseFloat(window.sessionStorage.getItem('mortgageRate'),10);\r\n    console.log(`global defaults mortgage rate is now ${rateDefaults.mortgageInterest}`);\r\n    rateDefaults.homeValueGrowth=parseFloat(window.sessionStorage.getItem('homeGrowth'),10);\r\n    console.log(`global defaults home value growth rate is now ${rateDefaults.homeValueGrowth}`);\r\n    window.sessionStorage.setItem('defaultDistributed', 1);\r\n}\r\n\r\nif(parseInt(window.sessionStorage.getItem('defaultCounter'), 10)<2){\r\n    window.addEventListener('load', insertDefaultValues);\r\n    /* const pullDefaultButton = document.getElementById(\"saveDefault\");\r\n    pullDefaultButton.addEventListener(\"click\", insertDefaultValues); */\r\n    const defaultCounter=parseInt(window.sessionStorage.getItem('defaultCounter'), 10)+1;\r\n    window.sessionStorage.setItem('defaultCounter', defaultCounter);\r\n}else{\r\n    console.log(`Trying to add default event listener again!`)\r\n}\r\n\r\n\r\n//Only exporting one object from this file for now.  Future default values can be added to the same object or split out as needed\r\nmodule.exports = rateDefaults;","//import rate default values for use in below functions-primarily growth rate and inflation rate.  \r\n//These are passed as default paramter values to the function but can be changed at the function call\r\nconst rateDefaults = require('./globaldefaults.js');\r\n\r\n//Grow Against Inflation is the basic function which calculates the new value of an amount of money after one year of growth.  \r\n//Values are entered with raw growth rate and inflation is separate, with inflation discounting the growth rate within the calculation\r\n//Typically this function will be called with years=1, to take one value and \"grow\" it by one year.  But in general this function can be \r\n//called with any number of years to calculate the future value of something.  This is particularly useful when calculating future salaries\r\n//Start is the starting value of whatever is being grown.  ** is the symbol for exponent in JavaScript\r\n\r\nconst growAgainstInflation = (start, years=1, grow=rateDefaults.growth, inflation=rateDefaults.inflation) => {\r\n    let newAmount = start*((1+(grow-inflation))**years);\r\n    return newAmount;\r\n}\r\n\r\nconst basicFunctions = {growAgainstInflation};\r\n//Set up to export more than one basic function with this basicFunctions object, but currently only have one to worry about\r\nmodule.exports = basicFunctions;\r\n","//import rate default values for use in below functions-growth rate, inflation rate, mortgage interest rate, mortgage years \r\n////These are passed as default paramter values to the function but can be changed at the function call\r\nconst rateDefaults = require('./globaldefaults.js');\r\n//Import basic functions object and extract grow against infaltion function for calculating future home values as the value grows over time\r\nconst basicFunctions = require('./basicfunctions.js');\r\nconst growAgainstInflation = basicFunctions.growAgainstInflation;\r\n\r\n//home creator takes all the required variables related to a home purchase and saves them as an object.  This is a factory function for home objects\r\n//Every value has a getter and setter method, though most of them are probably not necessary\r\n//Important method is yearly values\r\nconst homeCreator = (_number, _yearPurchased, _yearSold, _originalValue, _growthRate=rateDefaults.homeValueGrowth, _mortgageInterestRate=rateDefaults.mortgageInterest,\r\n    _realEstateTaxRate=rateDefaults.realEstateTax, _downPayment=.2*_originalValue, _mortgageYears=rateDefaults.mortgageYears) =>{\r\n    return {\r\n        //Number just refers to which house in the progression of owning homes this particualr home object is referring to-may not be necessary-could probably just use year purchased/sold\r\n        _number,\r\n        //Year when the house is purchased-helps set the range for which the house has meaningful data like value, equity, loan remaining, etc.\r\n        _yearPurchased,\r\n        //Year when the house is sold-helps set the range for which the house has meaningful data like value, equity, loan remaining, etc.\r\n        _yearSold,\r\n        //Purchase price of the home\r\n        _originalValue,\r\n        //Growth rate can be left as default or set when calling home creator.  Would need an array of growth rates set by user, and that array to be consumed, to support this\r\n        _growthRate,\r\n        //Growth rate can be left as default or set when calling home creator.  Would need an array of interest rates set by user, and that array to be consumed, to support this\r\n        _mortgageInterestRate,\r\n        //real estate tax rate rate can be left as default or set when calling home creator.  Would need an array of tax rates set by user, and that array to be consumed, to support this\r\n        _realEstateTaxRate,\r\n        //Down payment will default to 20% if nothing provided.  If full transfer is true above, the previous home's equity will be used as DP regardless of what % that represents\r\n        _downPayment,\r\n        //Mortgage years can be left as default or set when calling home creator.  Would need an array of loan lengths set by user, and that array to be consumed, to support this\r\n        _mortgageYears,\r\n        //yearly values takes in any year and returns relevant values for the home-the monthly payment (which does not change over time), amount of equity in the home,\r\n        //remaining loon balance, and the overall value of the home.  These are returned as four objets which make up one parent object\r\n        yearlyValues (seekingYear=this._yearPurchased) {\r\n            //start by making sure the year being passed to method is reasonable\r\n            if(seekingYear>2100 || seekingYear < 1950){\r\n                console.log(`Please enter a valid year to return relevant home values`);\r\n            }else{\r\n            //Then calculate the monthly payment of the loan based on outstanding principle, interest rate, length of mortgage, etc.  Standard loan calculator formula\r\n            //This payment is monthly which is one of the only values in the app which refers to a montly value-hence the *12 and /12 in the formula\r\n            let monthlyPayment = (this._originalValue-this._downPayment)*((this._mortgageInterestRate/12)*(1+(this._mortgageInterestRate/12))**(this._mortgageYears*12))/(((1+(this._mortgageInterestRate/12))**(this._mortgageYears*12))-1);\r\n\r\n            //Annual cost section\r\n            let annualCost;\r\n            //If seeking year does not fall within the range of when the house is actually owned, annual cost is 0\r\n            if(seekingYear>this._yearSold || seekingYear<=this._yearPurchased){\r\n                annualCost = 0;\r\n            //Check if seeking year is after the loan has been fully paid but also before the year sold-basically when the only cost associated with the home is ongoing real estate tax payments\r\n            }else if(seekingYear>this._yearPurchased+this._mortgageYears){\r\n                //annual cost in this scenario is just the growing value of the home times the real estate tax rate\r\n                annualCost = (growAgainstInflation(this._originalValue, seekingYear-this._yearPurchased, this._growthRate, rateDefaults.inflation)*this._realEstateTaxRate);\r\n            }//Now we are in the \"normal\" range when the house is actually owned and not yet paid off\r\n            else{\r\n                //annual cost is the constant monthly payment*12 + the growing value of the home times the real estate tax rate\r\n                annualCost= (monthlyPayment*12)+(growAgainstInflation(this._originalValue, seekingYear-this._yearPurchased, this._growthRate, rateDefaults.inflation)*this._realEstateTaxRate);\r\n            }\r\n            //Remaining balance on the loan section\r\n            let remainingBalance;\r\n            //If the seeking year is before the house is purchased, after it is sold, or after the loan is fully paid off, remaining balance is 0\r\n            if(seekingYear>this._yearPurchased+this._mortgageYears || seekingYear>this._yearSold || seekingYear<=this._yearPurchased){\r\n                remainingBalance = 0;\r\n            }else{\r\n                //If not, remaining balance is calculated by another, related loan calculator formula using loan starting value, length, and interest rate\r\n                remainingBalance = (this._originalValue-this._downPayment)*((1+(this._mortgageInterestRate/12))**(this._mortgageYears*12)-(1+(this._mortgageInterestRate/12))**((seekingYear-this._yearPurchased)*12))/(((1+(this._mortgageInterestRate/12))**(this._mortgageYears*12))-1);\r\n            }\r\n\r\n            //Equity section-how much money the owner has as an asset in the home\r\n            let equity;\r\n            //If the house hasn't been purhcased yet, or has already been sold, equity is 0 (equity from a home sale will have already been transferred to a cash account or to another home)\r\n            if(seekingYear>this._yearSold || seekingYear<=this._yearPurchased){\r\n                equity=0;\r\n            }else {\r\n                //If the home is owned in the seeking year, equity is calculated as the value of the home minus the above calculated remaining balance on the loan\r\n                equity = growAgainstInflation(this._originalValue, seekingYear-this._yearPurchased, this._growthRate, rateDefaults.inflation)-remainingBalance;\r\n            }\r\n            //define object which is used to return all releavnt values for that home in the given year \r\n            const homeValueAtCertainYear = {monthlyPayment, annualCost, remainingBalance, equity};\r\n            return homeValueAtCertainYear;\r\n            }\r\n        },    \r\n        get number(){\r\n            if(typeof this._number === 'number'){\r\n                return this._number;\r\n            } else {\r\n                console.log(`Enter valid number for which house number this is`);\r\n            }\r\n        },\r\n        set number (newNumber){\r\n            if (typeof newNumber==='number' && newNumber>0 && newNumber > 100){\r\n                this._number = newNumber;\r\n            }else{\r\n                console.log(`Enter valid number for which house number this is`);\r\n            }\r\n        },\r\n        get yearPurchased(){\r\n            if(typeof this._yearPurchased === 'number'){\r\n                return this._yearPurchased;\r\n            } else {\r\n                console.log(`Enter valid year for the purchase year of the house`);\r\n            }\r\n        },\r\n        set yearPurchased (newYear){\r\n            if (typeof newYear==='number' && newYear>1900 && newYear < 3000){\r\n                this._yearPurchased = newYear;\r\n            }else{\r\n                console.log(`Enter valid year for the purchase year of the house`);\r\n            }\r\n        },\r\n        get yearSold(){\r\n            if(typeof this._yearSold === 'number'){\r\n                return this._yearSold;\r\n            } else {\r\n                console.log(`Enter valid year for the year the house was sold`);\r\n            }\r\n        },\r\n        set yearSold (newYear){\r\n            if (typeof newYear==='number' && newYear>=this._yearPurchased && newYear < 3000){\r\n                this._yearSold = newYear;\r\n            }else{\r\n                console.log(`Enter valid year for the year the house was sold`);\r\n            }\r\n        },\r\n        get originalValue(){\r\n            if(typeof this._originalValue === 'number'){\r\n                return this._originalValue;\r\n            } else {\r\n                console.log(`Enter valid number for the original value of the house`);\r\n            }\r\n        },\r\n        set originalValue (newValue){\r\n            if (typeof newValue==='number' && newValue<1 && newValue > -.5){\r\n                this._originalValue = newValue;\r\n            }else{\r\n                console.log(`Enter valid number for the original value of the house`);\r\n            }\r\n        },\r\n        get growthRate(){\r\n            if(typeof this._growthRate === 'number'){\r\n                return this._growthRate;\r\n            } else {\r\n                console.log(`Enter valid number for the original value of the house`);\r\n            }\r\n        },\r\n        set growthRate (newGrowth){\r\n            if (typeof newGrowth==='number' && newGrowth<1 && newGrowth > -.5){\r\n                this._growthRate = newGrowth;\r\n            }else{\r\n                console.log(`Enter valid number for the original value of the house`);\r\n            }\r\n        },\r\n        get mortgageInterestRate(){\r\n            if(typeof this._mortgageInterestRate === 'number'){\r\n                return this._mortgageInterestRate;\r\n            } else {\r\n                console.log(`Enter valid number for the original value of the house`);\r\n            }\r\n        },\r\n        set mortgageInterestRate (newRate){\r\n            if (typeof newRate==='number' && newRate<1 && newRate > 0){\r\n                this._mortgageInterestRate = newRate;\r\n            }else{\r\n                console.log(`Enter valid number for the original value of the house`);\r\n            }\r\n        },\r\n        get realEstateTaxRate(){\r\n            if(typeof this._realEstateTaxRate === 'number'){\r\n                return this._realEstateTaxRate;\r\n            } else {\r\n                console.log(`Enter valid number for the original value of the house`);\r\n            }\r\n        },\r\n        set realEstateTaxRate (newTaxRate){\r\n            if (typeof newTaxRate==='number' && newTaxRate<1 && newTaxRate > 0){\r\n                this._realEstateTaxRate = newTaxRate;\r\n            }else{\r\n                console.log(`Enter valid number for the original value of the house`);\r\n            }\r\n        },\r\n        get downPayment(){\r\n            if(typeof this._downPayment === 'number'){\r\n                return this._downPayment;\r\n            } else {\r\n                console.log(`Enter valid number for the down payment`);\r\n            }\r\n        },\r\n        set downPayment (newDP){\r\n            if (typeof newDP==='number' && newDP<1 && newDP > -.5){\r\n                this._downPayment = newDP;\r\n            }else{\r\n                console.log(`Enter valid number for the down payment`);\r\n            }\r\n        },\r\n        get mortgageYears(){\r\n            if(typeof this._mortgageYears === 'number'){\r\n                return this._mortgageYears;\r\n            } else {\r\n                console.log(`Enter valid number for length of the mortgage`);\r\n            }\r\n        },\r\n        set mortgageYears (newYears){\r\n            if (typeof newYears==='number' && newYears>0 && newYears <100){\r\n                this._mortgageYears = newYears;\r\n            }else{\r\n                console.log(`Enter valid number for length of the mortgage`);\r\n            }\r\n        },\r\n        get mortgagePayment(){\r\n            if(typeof this._mortgagePayment === 'number'){\r\n                return this._mortgagePayment;\r\n            } else {\r\n                console.log(`Error calculating mortgage payment`);\r\n            }\r\n        }                     \r\n    }\r\n};\r\n\r\n//House progression is an array which contains all the homes to be owned, each home being an object defined above by home creator\r\nlet houseProgression = [];\r\n//House purchase cash flow is an array of numbers which define years where homes are bought or sold, and what the cashs flow consequences are for those actions.  If a home is bought, maybe the DP is a negative cashflow\r\n//out of some account.  If a home is bought and previous one is sold, there could be a net positive cash flow if the second downpayment is less than the equity in the previous home, etc.\r\n//This array only has values during years where home purchase/selling activity takes place.  Each element has a year and a cash flow value in it\r\nlet housePurchaseCashFlow = [];\r\n\r\nfunction insertHousingValues (){\r\n    let numberOfHouses;\r\n    let yearsPurchased=[];\r\n    let originalValues=[];\r\n    let fullTransfer=[];\r\n    numberOfHouses=parseInt(window.sessionStorage.getItem('NOH'), 10);\r\n    const houseArray = JSON.parse(window.sessionStorage.getItem('houseArray'));\r\n    for(let i=0; i<numberOfHouses; i++){\r\n        yearsPurchased[i]=houseArray[i][0];\r\n        originalValues[i]=houseArray[i][1];\r\n        fullTransfer[i]=houseArray[i][2];                \r\n    }\r\n    console.log(`House page NOH is ${numberOfHouses}`);\r\n    console.log(`House page years purchased is ${yearsPurchased}`);\r\n    console.log(`House page original values is ${originalValues}`);\r\n    console.log(`House page full transfer y/n is ${fullTransfer}`);\r\n    window.sessionStorage.setItem('housingDistributed', 1);\r\n\r\n    //For loop to run through all the houses defined by UI inputs and create a home object for each using the defined values\r\n    //In general this would need to be extended to look at more variables-independent growth rates for each house, for example\r\n    for (i=0; i<numberOfHouses; i++){\r\n        //Have to treat first house separately, as there is no chance of a \"transfer\", it has to just be purchased with a negative DP cashflow\r\n        if(i===0){\r\n            //Create the home with specified values, and add to house purchase cash flow array with year and DP value\r\n            houseProgression[i]=homeCreator(i+1, yearsPurchased[i], yearsPurchased[i+1], originalValues[i]);\r\n            housePurchaseCashFlow[i]=[houseProgression[i].yearPurchased, -houseProgression[i].downPayment];\r\n        }else{\r\n            //IF full transfer is false, still create the home object but fill in cash flow array with the year purchased, and the difference between the previous homes equity in the sale year and the current homes downpayment\r\n            //For year purchased, using yearsPurchased[i].  For year sold using [i+1] which means the assumption is that only one home is owned at at a time-limitation here\r\n            if(!fullTransfer[i]){\r\n                houseProgression[i]=homeCreator(i+1, yearsPurchased[i], yearsPurchased[i+1], originalValues[i]);\r\n                housePurchaseCashFlow[i]=[yearsPurchased[i], houseProgression[i-1].yearlyValues(yearsPurchased[i]).equity-houseProgression[i].downPayment];\r\n            //If full transfer is true, have to set the downpayment value explicity by calculating the previous homes equity at in the yaer of sale.  Undefined parameters are just keeping the default value\r\n            }else{\r\n                houseProgression[i]=homeCreator(i+1, yearsPurchased[i], yearsPurchased[i+1], originalValues[i], undefined, undefined, undefined, \r\n                houseProgression[i-1].yearlyValues(yearsPurchased[i]).equity, undefined);\r\n                //In this case, no effect to cash flow with full transfer=true\r\n                housePurchaseCashFlow[i]=[yearsPurchased[i], 0];\r\n            }  \r\n        }\r\n    }\r\n    window.sessionStorage.setItem('housingConsumed', 1);\r\n}\r\n\r\nwindow.addEventListener('load', insertHousingValues);\r\n/* const insertHousingButton = document.getElementById(\"saveHousing\");\r\ninsertHousingButton.addEventListener(\"click\", insertHousingValues); */\r\n\r\n//This is meant to be user entered data, stored in some ararys by the UI to be consumed by the app\r\n//Full transfer refers to whether or not when a previous house is sold, the full equity realized from the sale is transferred into the downpayment for the new home\r\n//If set to false, whatever downpayment percentage is used when calling homeCreator will dictate the value of the downpayment\r\n//If set to true, the amount of equity in the previous home is used as the downpayment in the next home.  In general this is more than 20% but doesn't have to be\r\n//Not sure if this can handle owning two homes at once-as in, not selling the previous home when buying a new home\r\nlet numberOfHouses2 = 3;\r\nlet yearsPurchased2 = [2016, 2022, 2034];\r\nlet originalValues2 = [344000, 600000, 1000000];\r\nlet fullTransfer2 = [false, false, false];\r\n\r\n//This function takes a year as a parameter and returns the annual cost of ownership for each home for that year.  This function is probably set up to support owning multiple homes at once, but the above for loop is not\r\nconst returnAnnualHousingCost = year =>{\r\n    const annualCostValues = [];\r\n    //Create array of the annual cost of all homes in the system for that year\r\n    houseProgression.forEach(home => {\r\n        annualCostValues.push(home.yearlyValues(year).annualCost);\r\n    })\r\n    //then reduce above array to sum up all those annual cost values into one value, representing all home value ownership costs\r\n    const annualCost = annualCostValues.reduce((previousValue, currentValue)=>{\r\n        return previousValue + currentValue;\r\n    })\r\n    return annualCost;\r\n}\r\n\r\nfunction findHousePurchaseYearCashFlow(propValue) {\r\n    let valueToReturn;\r\n    for (let i=0; i < housePurchaseCashFlow.length; i++){\r\n        if (housePurchaseCashFlow[i][0] === propValue){\r\n            valueToReturn=housePurchaseCashFlow[i][1];\r\n            }       \r\n        }\r\n    if(valueToReturn===undefined){\r\n        return 0;\r\n    }else{\r\n        return valueToReturn;\r\n    }\r\n}\r\n\r\n//Consolidate function to return annual housing cost, and cash flow array, to be exported and used in overall scheme to calculate life for each year \r\nconst housingExports = {returnAnnualHousingCost, findHousePurchaseYearCashFlow}\r\nmodule.exports = housingExports;","let numberOfKids2;\r\nlet yearsBorn2=[];\r\nlet requireDayCare2=[];\r\nlet privateCollege2=[];\r\nlet monthlyCost2;\r\nlet dayCareMonthly2;\r\nlet privateCollegeAnnual2;\r\nlet publicCollegeAnnual2;\r\n\r\nfunction insertKidValues (){\r\n    numberOfKids2=parseInt(window.sessionStorage.getItem('NOK'), 10);\r\n    const kidArray = JSON.parse(window.sessionStorage.getItem('kidArray'));\r\n    for(let i=0; i<numberOfKids2; i++){\r\n        yearsBorn2[i]=kidArray[i][0];\r\n        requireDayCare2[i]=kidArray[i][1];\r\n        privateCollege2[i]=kidArray[i][2];                \r\n    }\r\n    console.log(`Kid page NOK is ${numberOfKids2}`);\r\n    console.log(`Kid page years born is ${yearsBorn2}`);\r\n    console.log(`Kid page day care y/n is ${requireDayCare2}`);\r\n    console.log(`Kid page private college y/n is ${privateCollege2}`);\r\n    monthlyCost2=parseInt(window.sessionStorage.getItem('monthlyKid'), 10);\r\n    console.log(`Kid page monthly cost is ${monthlyCost2}`);\r\n    dayCareMonthly2=parseInt(window.sessionStorage.getItem('dayCare'), 10);\r\n    console.log(`Kid page day care is ${dayCareMonthly2}`);\r\n    privateCollegeAnnual2=parseInt(window.sessionStorage.getItem('privCollege'), 10);\r\n    console.log(`Kid page private college is ${privateCollegeAnnual2}`);\r\n    publicCollegeAnnual2=parseInt(window.sessionStorage.getItem('pubCollege'), 10);\r\n    console.log(`Kid page public college is ${publicCollegeAnnual2}`);\r\n    window.sessionStorage.setItem('kidCostDistributed', 1);\r\n}\r\nwindow.addEventListener('load', insertKidValues);\r\n/* const pullCostButton4 = document.getElementById(\"saveCost\");\r\npullCostButton4.addEventListener(\"click\", insertKidValues); */\r\n\r\n//This is meant to be user entered data, stored in some ararys by the UI to be consumed by the app\r\nlet numberOfKids = 3;\r\nlet yearsBorn = [2022, 2024, 2026];\r\nlet names = ['Frankie', 'Suzie', 'Armando'];\r\n//Require day care = true means nobody is home to take care of the kid from age 0-4\r\nlet requireDayCare = [true, true, true];\r\n//Determines annual cost of college for ages 19-22\r\nlet privateCollege = [true, true, true];\r\n//regular monthly cost whenver the kid is at home 0-18\r\nconst monthlyCost = 1500;\r\n//cost of daycare if applicable, ages 0-4\r\nconst dayCareMonthly = 1000;\r\nconst privateCollegeAnnual = 60000;\r\nconst publicCollegeAnnual = 30000;\r\n//standard tax credit for dependent\r\nconst taxCredit = 1500;\r\n\r\n//Kid creator takes all the required variables related to the cost of a kid, and saves them as an object.  This is a factory function for kid objects\r\n//Really only need a name and year born, default values are reasonable\r\n//Important method is yearlyCost\r\nconst kidCreator = (_name='Kid', _yearBorn=2020, _requiresDayCare=false, _privateCollege=true) =>{\r\n    return {\r\n        _name,\r\n        _yearBorn,\r\n        _requiresDayCare,\r\n        _privateCollege,\r\n        //With above information, can calculate estimated cost for this kid for a given year\r\n        yearlyCost(seekingYear){\r\n            let cost = 0;\r\n            //if seeking year is before birth year, cost is 0\r\n            if(seekingYear<this._yearBorn){\r\n                cost =0;\r\n            //if seeking year occurs between age 0 and 4, and that kid requires day care, enter this section\r\n            }else if(seekingYear-this._yearBorn<4 && this._requiresDayCare){\r\n                //cost is regular monthly cost + daycare cost\r\n                cost = (monthlyCost + dayCareMonthly)*12-taxCredit;\r\n            //This section is for kids aged 0-4 that don't require daycare, or any kid aged 0-18 which wasn't caught by previous else if section\r\n            }else if ((seekingYear-this._yearBorn<4 && !this._requiresDayCare) || seekingYear-this._yearBorn<=18 ){\r\n                //cost does not include daycare\r\n                cost = monthlyCost*12-taxCredit;\r\n            //Seeking year falls within college years for private college\r\n            }else if (seekingYear-this._yearBorn>18 && seekingYear-this._yearBorn<23 && this._privateCollege){\r\n                cost = privateCollegeAnnual-taxCredit;\r\n            //Seeking year falls within college years for public college\r\n            }else if (seekingYear-this._yearBorn>18 && seekingYear-this._yearBorn<23 && !this._privateCollege){\r\n                cost = publicCollegeAnnual-taxCredit;\r\n            //Kid has left the nest, no cost\r\n            }else if (seekingYear-this._yearBorn>22){\r\n                cost = 0;\r\n            }\r\n            return cost;\r\n        }  \r\n    }\r\n}\r\n\r\n//Kiddos is an array which contains the kids invovled, each kid being an object defined above by kid creator\r\nlet kiddos = [];\r\n//For loop to run through the kids defined by UI inputs and create a kid object for each using the defined values\r\nfor (i=0; i<numberOfKids; i++){\r\n    kiddos[i]=kidCreator(names[i], yearsBorn[i], requireDayCare[i], privateCollege[i]);\r\n}\r\n\r\n//This function takes a year as a parameter and returns the annual cost of having kids for that year.  Will add up costs of multiple kids at the same time\r\nconst returnAnnualKidCost = year =>{\r\n    const annualCostValues = [];\r\n    kiddos.forEach(kid => {\r\n        //for each kid, add the cost for the given year to an array\r\n        annualCostValues.push(kid.yearlyCost(year));\r\n    })\r\n    //then reduce above array to sum up kid cost values into one total cost number\r\n    const annualCost = annualCostValues.reduce((previousValue, currentValue)=>{\r\n        return previousValue + currentValue;\r\n    })\r\n    return annualCost;\r\n}\r\n\r\n//export annual kid cost calculator to be used in overall life yearly calculations\r\nmodule.exports = returnAnnualKidCost;","//const rateDefaults = require('./globaldefaults.js');\r\n//Import basic functions object and extract grow against infaltion function for calculating future home values as the value grows over time\r\nconst basicFunctions = require('./basicfunctions.js');\r\nconst growAgainstInflation = basicFunctions.growAgainstInflation;\r\nconsole.log(`Time Person page top part at ${new Date().getSeconds()} and ${new Date().getMilliseconds()}`);\r\n\r\n//person creator takes all the required variables related to a person and their earnings, and saves them as an object.  This is a factory function for person objects\r\n//Only certain values have a getter and setter method, these are the ones used by retirement functions\r\n//Important method is yearly salary\r\nconst personCreator = (_name='Person', _age=30, _startingSalary=100000, _salaryGrowth=.05, _salaryBumps=[], _salaryPlateau=[], _retirementYear, _preTaxContribution=0, _companyMatch=0) =>{\r\n    return {\r\n        //Name used to identify account owners for retirement\r\n        _name,\r\n        //age when app is being run, important for retirement/RMD considerations\r\n        _age,\r\n        _startingSalary,\r\n        //Salary growth is not tied to default 5% growth of money-likely to vary widely across people\r\n        _salaryGrowth,\r\n        //Salary bumps are one time (one year) increases in salary meant to approximate promotion related income increases\r\n        _salaryBumps: _salaryBumps,\r\n        //salary plateau is a year after which salary growth slows, ceases, or reverses.  Has to be after all bumps\r\n        _salaryPlateau,\r\n        //Salary is set to 0 after retirement year-no partial retirement support, though could accomplish this with bump/plateau theoretically\r\n        _retirementYear,\r\n        //Only relevant if 401k account will be tied to this person.  If it doesn't apply, should be set to 0\r\n        _preTaxContribution,\r\n        _companyMatch,\r\n        //With above information, can calculate estimated salary for this person for a given year\r\n        yearlySalary(seekingYear){\r\n            let newSalary = this._startingSalary;\r\n            //console.log(`Initial newSalary is ${newSalary}`);\r\n            //y is the current year that function is being called in (2020)\r\n            const y = new Date().getFullYear();\r\n            //First check if seeking year is before the current year, which wouldn't make much sense.  Return starting salary, which is always discounted by pre tax contribution rate (which could be 0 and therefore have no impact)\r\n            if(seekingYear<y){\r\n                //console.log(`Seeking year before current year code is being executed`);\r\n                return newSalary*(1-this.preTaxContribution);\r\n            //if seeking year is after retirement, salary is 0\r\n            }else if(seekingYear>=this._retirementYear){\r\n                newSalary=0;\r\n                //console.log(`Seeking year after retirement year code is being executed`);\r\n                return newSalary;\r\n            //Check if there are salary bumps defined, and seeking year is after at least one of the bumps.  Or if plateau is defined, and seeking year is after plateau\r\n            }else if ((this._salaryBumps.length>0 && seekingYear>=this._salaryBumps[0][0]) || (this._salaryPlateau.length>0 && seekingYear>=this._salaryPlateau[0])){\r\n                //console.log(this._salaryBumps.length);\r\n                //console.log(this._salaryPlateau.length);\r\n                //Then check if seeking year is before plateau year (or there is no plateau)-therefore can only focus on salary bumps\r\n                if(this._salaryPlateau.length===0 || seekingYear<this._salaryPlateau[0]){\r\n                    //first grow salary using growth rate and number of years between seeking year and current year (standard)\r\n                    newSalary = growAgainstInflation(newSalary, seekingYear-y, this._salaryGrowth);\r\n                    //console.log(`Second newSalary is ${newSalary}`);\r\n                    //relevant salary bumps are determined as the bumps which occur before the seeking year\r\n                    const relevantSalaryBumps = this._salaryBumps.filter(bump => {\r\n                        return bump[0] < seekingYear;                        \r\n                    })\r\n                    //Then use relevant salary bumps to increase salary accoringly.  Important to note that percentage increases commute so order of operation doesn't matter                \r\n                    for(i=0; i<relevantSalaryBumps.length; i++){\r\n                        newSalary = growAgainstInflation(newSalary, 1, relevantSalaryBumps[i][1]);                        \r\n                        //console.log(`For loop with i = ${i}, newSalary is ${newSalary}`);\r\n                    }\r\n                    //console.log(`Salary bump return statement code is being executed`);\r\n                    return newSalary*(1-this.preTaxContribution);\r\n                //Now we are in the section where seeking year is after the salary plateau year\r\n                }else{\r\n                    //If there are nonzero number of salary bumps, first repeat above section to calculate the salary at the end of the pre-plateau period.  No need to use relevant bumps since all bumps will be relevant\r\n                    if(this._salaryBumps.length>0){\r\n                        newSalary = growAgainstInflation(newSalary, this._salaryPlateau[0]-y-1, this._salaryGrowth);\r\n                        //console.log(`Plateau before For loop, newSalary is ${newSalary}`);\r\n                        for(i=0; i<this._salaryBumps.length; i++){\r\n                            newSalary = growAgainstInflation(newSalary, 1, this._salaryBumps[i][1]);                        \r\n                            //console.log(`Plateau For loop with i = ${i}, newSalary is ${newSalary}`);\r\n                        }\r\n                        //then calculate salary growth in plateau period, using the relevant years and new salary growth value\r\n                        newSalary = growAgainstInflation(newSalary, seekingYear+1-this._salaryPlateau[0], this._salaryPlateau[1]);\r\n                        //console.log(`Plateau after For loop, newSalary is ${newSalary}`);\r\n                        return newSalary*(1-this.preTaxContribution);\r\n                    //If there were no salary bumps to begin with, calculate salary at beginning of plateau period, then salary within plateau period\r\n                    }else{\r\n                        newSalary = growAgainstInflation(newSalary, this._salaryPlateau[0]-y-1, this._salaryGrowth);\r\n                        newSalary = growAgainstInflation(newSalary, seekingYear+1-this._salaryPlateau[0], this._salaryPlateau[1]);\r\n                        //console.log(`Post plateau, no salary bumps code is being executed`);\r\n                        return newSalary*(1-this.preTaxContribution); \r\n                    }\r\n                }\r\n            //if not, salary is calculated based on basic growth rate and number of years between first year and seeking year\r\n            }else{\r\n                newSalary = growAgainstInflation(this._startingSalary, seekingYear-y, this._salaryGrowth);\r\n                //console.log(`no salary bumps code is being executed`);\r\n                return newSalary;\r\n            }\r\n        },\r\n        get name(){\r\n            if(typeof this._name === 'string'){\r\n                return this._name;\r\n            } else {\r\n                console.log(`Enter valid name for this person (get)`);\r\n            }\r\n        },\r\n        set name (newName){\r\n            if (typeof newName==='string'){\r\n                this._name = newName;\r\n            }else{\r\n                console.log(`Enter valid name for this person (set)`);\r\n            }\r\n        },\r\n        //method to return person's age for a given year\r\n        age(year){\r\n            const y = new Date().getFullYear();\r\n            if(year<y||year>2200){\r\n                console.log(`Enter a valid year to return person's age`);\r\n            }else{\r\n                age = (year-y)+this._age;\r\n                return age;\r\n            }\r\n        },\r\n        get preTaxContribution(){\r\n            if(typeof this._preTaxContribution === 'number'){\r\n                return this._preTaxContribution;\r\n            } else {\r\n                console.log(`Enter valid pre tax contribution rate (get)`);\r\n            }\r\n        },\r\n        set preTaxContribution (newRate){\r\n            if (typeof newRate==='number' && newRate>=0 && rewRate<=.5){\r\n                this._preTaxContribution = newRate;\r\n            }else{\r\n                console.log(`Enter valid pre tax contribution rate (set)`);\r\n            }\r\n        },\r\n        get companyMatch(){\r\n            if(typeof this._companyMatch === 'number'){\r\n                return this._companyMatch;\r\n            } else {\r\n                console.log(`Enter valid company match contribution rate (get)`);\r\n            }\r\n        },\r\n        set companyMatch (newRate){\r\n            if (typeof newRate==='number' && newRate>=0 && rewRate<=.5){\r\n                this._companyMatch = newRate;\r\n            }else{\r\n                console.log(`Enter valid company match contribution rate (set)`);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n//Household members is an array which contains the people invovled, each person being an object defined above by person creator\r\nlet householdMembers = [];\r\n\r\nfunction insertPersonValues (){\r\n    numberOfPeople=parseInt(window.sessionStorage.getItem('NOP'), 10);\r\n    const personArray = JSON.parse(window.sessionStorage.getItem('personArray'));\r\n    let names=[];\r\n    let age=[];\r\n    let startingSalary=[];\r\n    let salaryGrowth=[];\r\n    let salaryPlateau=[[],[]];\r\n    let retirementYears=[];\r\n    let preTax=[];\r\n    let companyMatch=[];\r\n    let salaryBumps=[[],[]];\r\n\r\n    for(let i=0; i<numberOfPeople; i++){\r\n        names[i]=personArray[i][0];\r\n        age[i]=personArray[i][1];\r\n        startingSalary[i]=personArray[i][2];\r\n        salaryGrowth[i]=personArray[i][3];\r\n        salaryPlateau[i][0]=personArray[i][4];\r\n        salaryPlateau[i][1]=personArray[i][5];\r\n        retirementYears[i]=personArray[i][6];\r\n        preTax[i]=personArray[i][7];\r\n        companyMatch[i]=personArray[i][8];                \r\n    }\r\n    \r\n    console.log(`Person page array is ${personArray}`);\r\n    console.log(`Person page NOP is ${numberOfPeople}`);\r\n    console.log(`Person page names is ${names}`);\r\n    console.log(`Person page ages are ${age}`);\r\n    console.log(`Person page starting salaries are ${startingSalary}`);\r\n    console.log(`Person page salary growth is ${salaryGrowth}`);\r\n    console.log(`Person page salary plateaus is ${salaryPlateau}`);\r\n    console.log(`Person page retirement years are ${retirementYears}`);\r\n    console.log(`Person page pre tax are ${preTax}`);\r\n    console.log(`Person page company match are ${companyMatch}`);\r\n    \r\n    const bumpArray = JSON.parse(window.sessionStorage.getItem('bumpArray'));\r\n    salaryBumps=bumpArray;\r\n    console.log(`Person page bump array is ${salaryBumps}`);\r\n    window.sessionStorage.setItem('salaryDistributed', 1);\r\n    //For loop to run through the people defined by UI inputs and create a person object for each using the defined values\r\n    for (i=0; i<names.length; i++){\r\n        householdMembers[i]=personCreator(names[i], age[i], startingSalary[i], salaryGrowth[i], salaryBumps[i], salaryPlateau[i], retirementYears[i], preTax[i], companyMatch[i]);\r\n    }\r\n    console.log(`Household members are ${householdMembers}`);\r\n    window.sessionStorage.setItem('salaryConsumed', 1);\r\n    console.log(`Time Person page values inserted at ${new Date().getSeconds()} and ${new Date().getMilliseconds()}`);\r\n}\r\n\r\nif(parseInt(window.sessionStorage.getItem('personCounter'), 10)<2){\r\n    window.addEventListener('load', insertPersonValues);\r\n    const personCounter=parseInt(window.sessionStorage.getItem('personCounter'), 10)+1;\r\n    window.sessionStorage.setItem('personCounter', personCounter);\r\n}else{\r\n    console.log(`Trying to add person event listener again!`)\r\n}\r\nconsole.log(`Time Person page bottom at ${new Date().getSeconds()} and ${new Date().getMilliseconds()}`);\r\n\r\n//This is meant to be user entered data, stored in some ararys by the UI to be consumed by the app\r\n//In general can have more than two people, but won't make sense for tax purposes\r\n//All of these arrays need to exist, even if they are empty\r\nlet names2 = ['Jamie', 'John'];\r\nlet age2 = [31, 30];\r\nlet startingSalary2 = [60000, 116000];\r\nlet salaryGrowth2 = [.03, .04];\r\nlet retirementYears2 = [2055, 2060];\r\nlet salaryBumps2 = [[], [[2025, .05], [2035, .05]]];\r\nlet salaryPlateau2 = [[2045, .02], [2045, 0.02]];\r\nlet preTax2 = [0, .06];\r\nlet companyMatch2 = [0, .075];\r\n\r\nconst returnAnnualSalary = year =>{\r\n    const annualSalaryValues = [];\r\n    //Create array of the annual cost of all people in the household\r\n    householdMembers.forEach(person => {\r\n        annualSalaryValues.push(person.yearlySalary(year));\r\n    })\r\n    //then reduce above array to sum up all those annual cost values into one value, representing all home value ownership costs\r\n    const annualSalary = annualSalaryValues.reduce((previousValue, currentValue)=>{\r\n        return previousValue + currentValue;\r\n    })\r\n    return annualSalary;\r\n}\r\n\r\n//Consolidate function to return person creator function (which may not be necessary) and household members array, to be exported and used in overall scheme to calculate life for each year \r\nconst personExports = {householdMembers, returnAnnualSalary};\r\nmodule.exports = personExports; ","//Import rate defaults and growth function for account growth calculations\r\nconst rateDefaults = require('./globaldefaults.js');\r\nconst basicFunctions = require('./basicfunctions.js');\r\nconst growAgainstInflation = basicFunctions.growAgainstInflation;\r\n//Import household members array to assign owners to accounts-especially relevant for 401k contribution information\r\nconst personImports = require('./person.js');\r\nconst householdMembers = personImports.householdMembers;\r\nconst returnAnnualSalary = personImports.returnAnnualSalary;\r\n//const calculateNetIncome = require('./Taxes.js');\r\nconsole.log(`Time retirement page top at ${new Date().getSeconds()} and ${new Date().getMilliseconds()}`);\r\n\r\nlet numberOfAccounts;\r\nlet regNames=[];\r\nlet rothNames=[];\r\nlet f401kNames=[];\r\nlet regOwners=[];\r\nlet rothOwners=[];\r\nlet f401kOwners=[];\r\nlet regStartingValues=[];\r\nlet rothStartingValues=[];\r\nlet f401kStartingValues=[];\r\n\r\nfunction insertAccountValues (){\r\n    numberOfAccounts=parseInt(window.sessionStorage.getItem('NOA'), 10);\r\n    const accountArray = JSON.parse(window.sessionStorage.getItem('accountArray'));\r\n    regNames=[];\r\n    rothNames=[];\r\n    f401kNames=[];\r\n    regOwners=[];\r\n    rothOwners=[];\r\n    f401kOwners=[];\r\n    regStartingValues=[];\r\n    rothStartingValues=[];\r\n    f401kStartingValues=[];\r\n    for(let i=0; i<numberOfAccounts; i++){\r\n        if(accountArray[i][0]==\"401k\"){\r\n            f401kNames.push(accountArray[i][0] + (f401kNames.length+1));\r\n            f401kOwners.push(accountArray[i][1]);\r\n            f401kStartingValues.push(accountArray[i][2]);\r\n        }else if(accountArray[i][0]==\"Regular\"){\r\n            regNames.push(accountArray[i][0] + (regNames.length+1));\r\n            regOwners.push(accountArray[i][1]);\r\n            regStartingValues.push(accountArray[i][2]);\r\n        }else if(accountArray[i][0]==\"Roth\"){\r\n            rothNames.push(accountArray[i][0] + (rothNames.length+1));\r\n            rothOwners.push(accountArray[i][1]);\r\n            rothStartingValues.push(accountArray[i][2]);\r\n        }else{\r\n            console.log(`Enter correct account type`);\r\n        }                \r\n    }\r\n    console.log(`Time Retirement page insert values at ${new Date().getSeconds()} and ${new Date().getMilliseconds()}`);\r\n    console.log(`Retirment page NOA is ${numberOfAccounts}`);\r\n    console.log(`Retirment page names are ${regNames} and ${rothNames} and ${f401kNames}`);\r\n    console.log(`Retirment page owners are ${regOwners} and ${rothOwners} and ${f401kOwners}`);\r\n    console.log(`Retirment page starting values are ${regStartingValues} and ${rothStartingValues} and ${f401kStartingValues}`);\r\n    window.sessionStorage.setItem('accountDistributed', 1);\r\n}\r\nwindow.addEventListener('load', insertAccountValues);\r\n/* const insertAccountsButton = document.getElementById(\"saveAccounts\");\r\ninsertAccountsButton.addEventListener(\"click\", insertAccountValues); */\r\n\r\n//This find element index function is used to find the index number of a specific person (account owner) in the household members array.  Returns the index of that person in the array to be used later\r\nfunction findElementIndex(arr, propValue) {\r\n    for (var i=0; i < arr.length; i++){\r\n        if (arr[i].name === propValue){\r\n            return i;\r\n        }       \r\n    }     \r\n}\r\n\r\n//RMD factor is a function which returns the RMD factor for a given age.  These are set by the government\r\nconst rmdFactor = (age) => {\r\n    //If age is less than 70, no RMDs.  Is actually 70.5\r\n    if (age < 70){\r\n        return 0;\r\n    //RMDs technically go past 100 but this one stops at 100\r\n    }else if(age>=70 && age <=100){\r\n        let factorIndex = age-70;\r\n        //age values are excluded from the array, but they start at 70 and continue to 100, using index number in the array to loate\r\n        const factors = [27.4, 26.5, 25.6, 24.7, 23.8, 22.9, 22, 21.2, 20.4, 19.6, 18.8, 18, 17.2, 16.4, 15.6, \r\n            14.9, 14.2, 13.5, 12.8, 12.1, 11.5, 10.9, 10.3, 9.7, 9.1, 8.6, 8.1, 7.6, 7.1, 6.7, 6.3];\r\n        let factor = factors[factorIndex];\r\n        //only return the factor, which is used along with value of the account in that year to determin the RMD $ value\r\n        return factor; \r\n    }else{\r\n        console.log(`You are too old`);\r\n        return 0;\r\n    }\r\n}\r\n\r\n//Parent class InvestmentAccount.  Accoutns below inherit qualities from this class.  This class will probably not have any real instances of it, only instances of subclasses\r\n//Lots of getters and setters defined for relevant values\r\nclass InvestmentAccount {\r\n    constructor(name, currentValue=0, growth=rateDefaults.growth, owner) {\r\n        //name probably not really relevant, can probably define account by class and owner\r\n        this._name = name;\r\n        this._currentValue=currentValue;\r\n        //growth rate set to rate defaults value but can be changed in general based on type of account\r\n        this._growth = growth;\r\n        //Owner value is importand and must match householdmembers name values-need UI to mandate this\r\n        this._owner = owner;\r\n        //find owner index value within household members array for use below\r\n        this._ownerIndex = findElementIndex(householdMembers, this.owner);\r\n    }\r\n    //Grow method just grows the account valuee for 1 year-to be used in yearly life calculations\r\n    grow(){\r\n        this.currentValue = growAgainstInflation(this.currentValue, 1, this.growth);\r\n        }\r\n    get name(){\r\n        if(typeof this._name === 'string'){\r\n            return this._name;\r\n        } else {\r\n            console.log(`Enter valid name for this investment account (get)`);\r\n        }\r\n    }\r\n    set name (newName){\r\n        if (typeof newName==='string'){\r\n            this._name = newName;\r\n        }else{\r\n            console.log(`Enter valid name for this investment account (set)`);\r\n        }\r\n    }\r\n    get currentValue(){\r\n        if(typeof this._currentValue === 'number' && this._currentValue>=0){\r\n            return this._currentValue;\r\n        } else {\r\n            console.log(`Enter valid current value for this investment account (get)`);\r\n        }\r\n    }\r\n    set currentValue (newcurrentValue){\r\n        if (typeof newcurrentValue==='number' && newcurrentValue>=0 && newcurrentValue < 1000000000){\r\n            this._currentValue = newcurrentValue;\r\n        }else{\r\n            console.log(`Enter valid current value for this investment account (set)`);\r\n        }\r\n    }\r\n    get type(){\r\n        if(typeof this._type === 'number'){\r\n            return this._type;\r\n        } else {\r\n            console.log(`Enter valid type for this investment account`);\r\n        }\r\n    }\r\n    set type (newtype){\r\n        if (typeof newtype==='number' && newtype>0 && newtype<6){\r\n            this._type = newtype;\r\n        }else{\r\n            console.log(`Enter valid type for this investment account`);\r\n        }\r\n    }\r\n    get growth(){\r\n        if(typeof this._growth === 'number'){\r\n            return this._growth;\r\n        } else {\r\n            console.log(`Enter valid growth rate for this investment account`);\r\n        }\r\n    }\r\n    set growth (newgrowth){\r\n        if (typeof newgrowth==='number' && newgrowth>0 && newgrowth<.5){\r\n            this._growth = newgrowth;\r\n        }else{\r\n            console.log(`Enter valid growth rate for this investment account`);\r\n        }\r\n    }\r\n    get owner(){\r\n        if(typeof this._owner === 'string'){\r\n            return this._owner;\r\n        } else {\r\n            console.log(`Enter valid owner for this investment account (get)`);\r\n        }\r\n    }\r\n    set owner (newOwner){\r\n        if (typeof newowner==='string'){\r\n            this._owner = newOwner;\r\n        }else{\r\n            console.log(`Enter valid owner for this investment account (set)`);\r\n        }\r\n    }\r\n}\r\n\r\n//RegInvestment is meant to be a non-tax advantaged account, just a regular investment account where money can come in and out with no restrictions on age/timing, etc.  No RMDs\r\nclass RegInvestment extends InvestmentAccount {\r\n    //standard constructor, all the same values as parent class\r\n    constructor(name, startingValue=0, growth=rateDefaults.growth, owner){\r\n        super(name, startingValue, growth, owner);\r\n    }\r\n    //Change value method takes in an amount from a year of cash flow.  Positive means money is coming in to the account, negative means money is required from the account to balance cashflow\r\n    //Need year parameter just for consistency with other account types\r\n    addMoney(year, amount){\r\n        //if amount is greater than zero, just need to add that amount to current value to increase the value and move on\r\n        if(amount>=0){\r\n            this.currentValue += amount;\r\n            return 0;\r\n        }else{\r\n            console.log(\"Please enter a positive amount to call add money method\");\r\n        }\r\n    }\r\n    withdrawMoney(amount){\r\n        if(amount>0){\r\n            console.log(\"Please enter a negative amount to call withdraw money method\");\r\n        }\r\n        //if amount is negative, need to check if that amount is greater than the value of the account.  If so, set current value to 0 and return only the amount actually in the account to begin with\r\n        else if(-amount>=this.currentValue){\r\n            let returnAmount = this.currentValue;\r\n            this.currentValue=0;\r\n            //below section reduces returned amount according to capital gains taxes on values over $40,000 or $441,450\r\n            //account is still zeroed out, just less money is returned to balance cash flow\r\n            if(returnAmount<=40000){\r\n                return returnAmount;\r\n            }else if (returnAmount<=441450){\r\n                returnAmount = 40000 + ((returnAmount-40000)/1.15);\r\n                return returnAmount;\r\n            }else{\r\n                returnAmount = 40000 + ((441450-40000)/1.15) + ((returnAmount-441450)/1.20);\r\n                return returnAmount;\r\n            }\r\n        //This section is for negative amounts (requets from the account) but not such that account value is zeroed out\r\n        //Now for tax purposes, the amount deducted from account value is increased according to capital gains tax, but the returned amount is exactly what is \"requested\"\r\n        }else if(-amount<=40000){\r\n            this.currentValue += amount;\r\n            return -amount;\r\n        }else if(-amount<=441450){\r\n            let decAmount = -40000 + 1.15*(amount+40000);\r\n            this.currentValue += decAmount;\r\n            return -amount;\r\n        }else{\r\n            let decAmount = -40000 + 1.15*(-441450+40000) + 1.2*(amount+441450);\r\n            this.currentValue += decAmount;\r\n            return -amount;\r\n        }\r\n    }\r\n}\r\n\r\nclass RothIRA extends InvestmentAccount {\r\n    //standard constructor, all the same values as parent class\r\n    constructor(name, startingValue=0, growth=rateDefaults.growth, owner){\r\n        super(name, startingValue, growth, owner);\r\n    }\r\n    addMoney(year, amount){\r\n        //first check if year is reasonable\r\n        if(year<2020 || year>2200){\r\n            console.log(`Please enter a valid year to add money to this account`);\r\n        //check if amount if negative-shouldn't call addMoney with negative amount\r\n        }else if(amount<0){\r\n            console.log(`Can't call addMoney with negative amount of money`);\r\n        //Roth IRA has a contribution cap of $6k per year in 2020.  Can't add more than that in a given year.  Cap grows over time but inflation adjustments should keep this cap pretty close to $6k\r\n        }else if((householdMembers.length===1 && returnAnnualSalary(year)>139000)|| (householdMembers.length===2 && returnAnnualSalary(year)>206000)){\r\n            return amount;\r\n        }\r\n        else if (amount>6000){\r\n            this.currentValue+=6000;\r\n            console.log(`Can't add more than $6,000 in one year to Roth IRA account`);\r\n            return amount-6000;\r\n        }else{\r\n            this.currentValue+=amount;\r\n            return 0;\r\n        }\r\n    }\r\n    getRMD(year){\r\n        const ownerAge = householdMembers[this._ownerIndex].age(year);\r\n        let RMD=0;\r\n        //first check if year is reasonable\r\n        if(year<2020 || year>2200){\r\n            console.log(`Please enter a valid year to return RMD info for this Roth account`);\r\n        //Check if owner age is outside of RMD range\r\n        }else if(ownerAge<70 || ownerAge>100){\r\n            return RMD;\r\n        //If owner age within RMD range, subtract RMD from value of account and return RMD\r\n        }else if (ownerAge>=70 && ownerAge<=100){\r\n            RMD = this.currentValue/rmdFactor(ownerAge);\r\n            console.log(`Roth RMD is ${RMD}`);\r\n            this.currentValue-=RMD;\r\n            return RMD;\r\n        }else {\r\n            console.log(`Something weird happened with RMD for this Roth account`);\r\n        }\r\n    }\r\n    //Withdraw money method takes in an amount and year from a year of cash flow.  Should only be negative amount of money, meaning money is required from the account to balance cashflow\r\n    withdrawMoney(amount){\r\n        //Amount should be negative, otherwise use Add Money method\r\n        if(amount<=0){        \r\n            //If magnitude of amount is less than current value, can return full amount.  Sign is changed to indicate positive money is flowing to the bottom line\r\n            if(-amount<this.currentValue){\r\n                this.currentValue+=amount;\r\n                console.log(`amount less than current value section, currentValue is ${this.currentValue}`);\r\n                return -amount;\r\n                //If magnitue of amount is greater than the value of the account, set current value to 0 and return only the amount actually in the account to begin with.  No tax concerns with Roth\r\n            }else if(-amount>=this.currentValue){\r\n                let returnAmount = this.currentValue;\r\n                this.currentValue=0;\r\n                console.log(`amount greater than current value section, currentValue is ${this.currentValue}`);\r\n                return returnAmount;\r\n            }\r\n        }else{\r\n            console.log(`Can't use withdraw money method to add money`);\r\n        }\r\n    }\r\n}\r\n\r\nclass F401k extends InvestmentAccount {\r\n    //standard constructor but adding pretax contributiona and company match rates from househould members array to calculate annual growth\r\n    constructor(name, startingValue=0, growth=rateDefaults.growth, owner){\r\n        super(name, startingValue, growth, owner);\r\n        this._preTaxContribution = householdMembers[this._ownerIndex].preTaxContribution;\r\n        this._companyMatch = householdMembers[this._ownerIndex].companyMatch;\r\n    }\r\n    getRMD(year){\r\n        const ownerAge = householdMembers[this._ownerIndex].age(year);\r\n        let RMD=0;\r\n        //first check if year is reasonable\r\n        if(year<2020 || year>2200){\r\n            console.log(`Please enter a valid year to return RMD info for this 401k account`);\r\n        //Check if owner age is outside of RMD range\r\n        }else if(ownerAge<70 || ownerAge>100){\r\n            return RMD;\r\n        //If owner age within RMD range, subtract RMD from value of account and return RMD\r\n        }else if (ownerAge>=70 && ownerAge<=100){\r\n            RMD = this.currentValue/rmdFactor(ownerAge);\r\n            console.log(`401k RMD is ${RMD}`);\r\n            this.currentValue-=RMD;\r\n            return RMD;\r\n        }else {\r\n            console.log(`Something weird happened with RMD for this 401k account`);\r\n        }\r\n    }\r\n    //Change value method takes in an amount and year from a year of cash flow.  Positive means money is coming in to the account (shouldn't happen for this account), negative means money is required from the account to balance cashflow\r\n    increaseValue(year){\r\n        //first check if year is reasonable\r\n        if(year<2020 || year>2200){\r\n            console.log(`Please enter a valid year to increase this 401k account value`);\r\n        //now enter into meat of the method\r\n        }else{\r\n            //figure out salary for the owner of the account for the year in question\r\n            const salary = householdMembers[this._ownerIndex].yearlySalary(year);\r\n            //console.log(`salary is ${salary}`);\r\n            //figure out how salary contributes to increase of account value.  In retirement, salary will be zero, so will value increase\r\n            let valueIncrease = salary*(this._preTaxContribution+this._companyMatch);\r\n            //console.log(`valueIncrease is ${valueIncrease}`);\r\n            console.log(`401k account starting currentValue is ${this.currentValue}`);\r\n            this.currentValue+=valueIncrease;\r\n            console.log(`401k account after currentValue is ${this.currentValue}`);\r\n        }\r\n    }\r\n    withdrawMoney(amount){\r\n        //now enter into meat of the method   \r\n        if (amount>0){\r\n            console.log(`Can't use withdraw money method to add money`);\r\n        }else{\r\n            if(-amount<this.currentValue){\r\n                this.currentValue+=amount;\r\n                console.log(`amount less than current value section, currentValue is ${this.currentValue}`);\r\n                return -amount;\r\n            }               \r\n            if(-amount>=this.currentValue){\r\n                let returnAmount = this.currentValue;\r\n                this.currentValue=0;\r\n                console.log(`amount greater than current value section, currentValue is ${this.currentValue}`);\r\n                return returnAmount;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n//This is meant to be user entered data, stored in some ararys by the UI to be consumed by the app\r\n//This section for regular investment accounts\r\nlet names1 = ['Reg Account1', 'Reg Account2'];\r\nlet owners1 = ['Jamie', 'John'];\r\nlet startingValues1 = [50000, 100000];\r\n\r\nlet investmentAccounts = [];\r\nfor (i=0; i<startingValues1.length; i++){\r\n    investmentAccounts[i]= new RegInvestment(names1[i], startingValues1[i], undefined, owners1[i]);\r\n}\r\n//console.log(investmentAccounts);\r\n\r\n//This section for Roth accounts\r\nlet names2 = ['Jamie Roth', 'John Roth'];\r\nlet owners2 = ['Jamie', 'John'];\r\nlet startingValues2 = [6000, 50000];\r\n\r\nlet rothAccounts = [];\r\nfor (i=0; i<startingValues2.length; i++){\r\n    rothAccounts[i]= new RothIRA(names2[i], startingValues2[i], undefined, owners2[i]);\r\n}\r\n//console.log(RothAccounts);\r\n\r\n//This section for 401k investment accounts\r\nlet names3 = ['John 401k'];\r\nlet owners3 = ['John',];\r\nlet startingValues3 = [100000];\r\n\r\nlet f01kAccounts = [];\r\nfor (i=0; i<startingValues3.length; i++){\r\n    f01kAccounts[i]= new F401k(names3[i], startingValues3[i], undefined, owners3[i]);\r\n}\r\nconsole.log(`Time retirement page bottom at ${new Date().getSeconds()} and ${new Date().getMilliseconds()}`);\r\n\r\n//export all account types\r\nconst retirementExports = {investmentAccounts, rothAccounts, f01kAccounts};\r\nmodule.exports = retirementExports;","//define relevant tax brackets for sigle filers and joint filers, per 2020 tax code\r\n//Added 0,0 bracket to make it easier to use for loops below\r\nconst taxBracketsSingle = [[0,0],[.1, 9875], [.12, 40125],[.22, 85525],[.24,163300],[.32, 207350], [.35, 518400],[.37, 1000000]];\r\nconst taxBracketsJoint = [[0,0],[.1, 19750], [.12, 80250],[.22, 171050],[.24,326600],[.32, 414700], [.35, 622050],[.37, 1000000]];\r\n//standard deduction for single filers as of 2020 tax code.  Need to be careful that this deduction is only used once per year-it will be applied once per function call\r\nconst standardDeduction = 12400;\r\n\r\n//function to determine net income based on filing status and pretax income coming in.  Do not account for pre-tax 401k contributions, that is taken care of upstream\r\nconst calculateNetIncome = (numPeople, salary) => {\r\n    let tax=0;\r\n    //remove standard deduction from taxable income to lessen tax buren\r\n    let deductedSalary = salary-(standardDeduction*numPeople);\r\n    //if salary entered is less than standard deduction, no tax is owed, so the full salary is returned\r\n    if(deductedSalary<=0){\r\n        return salary;\r\n    //first calculate for single filers\r\n    }else if (numPeople === 1){\r\n        //create array of relevant tax brackets based on deducted salary-only those which are below deducted salary\r\n        let relevantTaxBrackets = taxBracketsSingle.filter(bracket => {\r\n            return bracket[1] < deductedSalary;            \r\n        })\r\n        //Then add the very next bracket above deducted salary to calculate final portion of tax owed\r\n        relevantTaxBrackets.push(taxBracketsSingle[relevantTaxBrackets.length]);\r\n        //add up tax owed in each bracket that is crossed completely by deducted. i starts at 1 so i-1 can be used to determine $ difference between each bracket, with 0,0 bracket in place at the beginning\r\n        //i goes up to length-1 so that final tax bracket can be calculated differently-using deducted salary instead of the full bracket width\r\n        for (i=1; i<relevantTaxBrackets.length-1; i++){\r\n            tax +=(relevantTaxBrackets[i][0]*(relevantTaxBrackets[i][1]-relevantTaxBrackets[i-1][1]));\r\n        }\r\n        //then add tax in the final bracket, using deducted salary as the upper bound\r\n        tax += relevantTaxBrackets[relevantTaxBrackets.length-1][0]*(deductedSalary-relevantTaxBrackets[relevantTaxBrackets.length-2][1]);\r\n        return salary-tax;\r\n    //then calculate for joint filers\r\n    }else if(numPeople===2){\r\n        //create array of relevant tax brackets based on deducted salary-only those which are below deducted salary\r\n        let relevantTaxBrackets = taxBracketsJoint.filter(bracket => {\r\n            return bracket[1] < deductedSalary;            \r\n        })\r\n        //Then add the very next bracket above deducted salary to calculate final portion of tax owed\r\n        relevantTaxBrackets.push(taxBracketsJoint[relevantTaxBrackets.length]);\r\n        //add up tax owed in each bracket that is crossed completely by deducted. i starts at 1 so i-1 can be used to determine $ difference between each bracket, with 0,0 bracket in place at the beginning\r\n        //i goes up to length-1 so that final tax bracket can be calculated differently-using deducted salary instead of the full bracket width\r\n        for (i=1; i<relevantTaxBrackets.length-1; i++){\r\n            tax +=(relevantTaxBrackets[i][0]*(relevantTaxBrackets[i][1]-relevantTaxBrackets[i-1][1]));\r\n        }\r\n        //then add tax in the final bracket, using deducted salary as the upper bound\r\n        tax += relevantTaxBrackets[relevantTaxBrackets.length-1][0]*(deductedSalary-relevantTaxBrackets[relevantTaxBrackets.length-2][1]);\r\n        return salary-tax;\r\n    //If number of earners isn't 1 or 2, can't calculate tax\r\n    }else{\r\n        console.log(`Please enter a valid number of salary earners`);\r\n    }\r\n}\r\n\r\nconst calculateAddtlNetIncome = (numPeople, newSalary, previousSalary) => {\r\n    origNet = calculateNetIncome(numPeople, previousSalary);\r\n    newNet = calculateNetIncome(numPeople, newSalary+previousSalary);\r\n    netNet = newNet - origNet;\r\n    return netNet;\r\n}\r\n\r\n//Export calculate net income function.  Will be used when calculating life income/net cash flow each year\r\nconst taxExports = {calculateNetIncome, calculateAddtlNetIncome}\r\nmodule.exports = taxExports;","const basicFunctions = require('./basicfunctions.js');\r\nconst growAgainstInflation = basicFunctions.growAgainstInflation;\r\n\r\nconst housingImports = require('./homecalcs.js');\r\nconst returnAnnualHousingCost = housingImports.returnAnnualHousingCost;\r\nconst findHousePurchaseYearCashFlow = housingImports.findHousePurchaseYearCashFlow;\r\nconst returnAnnualKidCost = require('./kiddos.js');\r\n\r\nconst personImports = require('./person.js');\r\nconst householdMembers = personImports.householdMembers;\r\nconst returnAnnualSalary = personImports.returnAnnualSalary;\r\n\r\nconst retirementImports = require('./retirement.js');\r\nconst investmentAccounts = retirementImports.investmentAccounts;\r\nconst rothAccounts = retirementImports.rothAccounts;\r\nconst f401kAccounts = retirementImports.f01kAccounts;\r\nconst taxImports = require('./taxes.js');\r\nconst calculateNetIncome = taxImports.calculateNetIncome;\r\nconst calculateAddlNetIncome = taxImports.calculateAddlNetIncome;\r\n\r\nconsole.log(`Time2 Life page top at ${new Date().getSeconds()} and ${new Date().getMilliseconds()}`);\r\n\r\nconst yearlyHouseSalary = year =>{\r\n    let totalSalary = returnAnnualSalary(year);\r\n    let netSalary = calculateNetIncome(householdMembers.length, totalSalary);\r\n    return netSalary;\r\n}\r\n\r\nconst monthlyDisc = 5000;\r\nconst monthlyGroc = 500;\r\nconst monthlyRetir = 5000;\r\n\r\nconst regSpending = (year, disc=5000, groc=500, retir=7500) =>{\r\n    let annualCost=0;\r\n    if (year>=householdMembers[0]._retirementYear){\r\n        annualCost = retir*12;\r\n        return annualCost;\r\n    }else if(year>=householdMembers[0]._retirementYear){\r\n        annualCost = retir*12;\r\n        return annualCost;\r\n    }else{\r\n        annualCost = (disc+groc)*12;\r\n        return annualCost;\r\n    }\r\n}\r\n\r\nconst netAfterCost = year => {\r\n    const income = yearlyHouseSalary(year);\r\n    const kidCost = returnAnnualKidCost(year);\r\n    const regCost = regSpending(year, monthlyDisc, monthlyGroc, monthlyRetir);\r\n    const houseCost = returnAnnualHousingCost(year);\r\n    const housePurchaseCashFlow = findHousePurchaseYearCashFlow(year);\r\n    let net = income - kidCost - regCost - houseCost + housePurchaseCashFlow;\r\n    return net;\r\n}\r\n\r\nconst posCashFlowPrecedence = [['Roth',1],['Roth',0],['Investment', 1], ];\r\nconst negCashFlowPrecedence = [['Investment', 1], ['Investment', 0], ['401k', 1], ['Roth',0], ['Roth',1]];\r\n\r\nfunction findAccountOwner(arr, propValue) {\r\n    for (var i=0; i < arr.length; i++){\r\n        if (arr[i]._ownerIndex === propValue){\r\n            return arr[i];\r\n        }       \r\n    }     \r\n}\r\n\r\nconst posCashFlowAccountList=[];\r\nfor(let i=0; i<posCashFlowPrecedence.length; i++){\r\n    if(posCashFlowPrecedence[i][0]==='Roth'){\r\n        posCashFlowAccountList[i] = findAccountOwner(rothAccounts, posCashFlowPrecedence[i][1]);  \r\n    }else if(posCashFlowPrecedence[i][0]==='Investment'){\r\n        posCashFlowAccountList[i] = findAccountOwner(investmentAccounts, posCashFlowPrecedence[i][1]);   \r\n    }\r\n}\r\n\r\nconst negCashFlowAccountList=[];\r\nfor(let i=0; i<negCashFlowPrecedence.length; i++){\r\n    if(negCashFlowPrecedence[i][0]==='Roth'){\r\n        negCashFlowAccountList[i] = findAccountOwner(rothAccounts, negCashFlowPrecedence[i][1]);  \r\n    }else if(negCashFlowPrecedence[i][0]==='Investment'){\r\n        negCashFlowAccountList[i] = findAccountOwner(investmentAccounts, negCashFlowPrecedence[i][1]);   \r\n    }else if (negCashFlowPrecedence[i][0]==='401k'){\r\n        negCashFlowAccountList[i] = findAccountOwner(f401kAccounts, negCashFlowPrecedence[i][1]);\r\n    }\r\n}\r\n\r\nconst balanceYearOfCashFlow = (year, net) =>{\r\n    console.log(`Initial net is ${net}`);\r\n    if(net>0){\r\n        for(let i=0; i<posCashFlowAccountList.length; i++){\r\n            net = posCashFlowAccountList[i].addMoney(year, net);\r\n            console.log(`Positive section, Post net is ${net}`);\r\n            console.log(posCashFlowAccountList[i]);\r\n            if(net===0){break;}\r\n        }\r\n        return net;\r\n    }else if(net<0){\r\n        for(let i=0; i<negCashFlowAccountList.length; i++){\r\n            net = net + negCashFlowAccountList[i].withdrawMoney(net);\r\n            console.log(`Negative section, Post net is ${net}`);\r\n            console.log(negCashFlowAccountList[i]);\r\n            if(net===0){break;}\r\n        }\r\n        return net;\r\n    }else{\r\n        console.log(`Net was exactly 0???`);\r\n    }\r\n}\r\n\r\nconst processRMDs = (year, net) =>{\r\n    for(let i=0; i<rothAccounts.length; i++){\r\n        net = net + rothAccounts[i].getRMD(year);\r\n        console.log(`RMD roth net is ${net}`);\r\n    }\r\n    for(let i=0; i<f401kAccounts.length; i++){\r\n        net = net + f401kAccounts[i].getRMD(year);\r\n        console.log(`RMD 401k net is ${net}`);\r\n    }\r\n    return net;\r\n}\r\n\r\nconst growAccounts = () =>{\r\n    for(let i=0; i<rothAccounts.length; i++){\r\n        rothAccounts[i].grow();\r\n    }\r\n    for(let i=0; i<f401kAccounts.length; i++){\r\n        f401kAccounts[i].grow();\r\n    }\r\n    for(let i=0; i<investmentAccounts.length; i++){\r\n        investmentAccounts[i].grow();\r\n    }\r\n}\r\n\r\nconst increase401ks = year =>{\r\n    if(f401kAccounts.length>0){\r\n        for(let i=0; i<f401kAccounts.length; i++){\r\n            f401kAccounts[i].increaseValue(year);\r\n            //console.log(f401kAccounts[i]);\r\n        }\r\n    }else{\r\n        console.log(`No 401k accounts`);\r\n    }\r\n}\r\n\r\nconst calcCashFlowUpToYear = year =>{\r\n    const y = new Date().getFullYear();\r\n    let net;\r\n    for(let i=y; i<=year; i++){\r\n        console.log(`i is ${i}`);\r\n        net = netAfterCost(i);\r\n        console.log(`big function first net is ${net}`);\r\n        increase401ks(i);\r\n        net = processRMDs(i, net);\r\n        console.log(`big function post RMD net is ${net}`);\r\n        net = balanceYearOfCashFlow(i, net);\r\n        console.log(`big function post balance net is ${net}`);\r\n        growAccounts();  \r\n        console.log(rothAccounts);\r\n        console.log(f401kAccounts);\r\n        console.log(investmentAccounts);    \r\n    }\r\n    return net;\r\n}\r\n\r\nlet testYear = 2022;\r\n//net2 = balanceYearOfCashFlow(2020, 63167);\r\n//console.log(net2);\r\nnetTest = calcCashFlowUpToYear(testYear);\r\nconsole.log(`result of big function is ${netTest}`);\r\n//shouldBeZero = balanceYearOfCashFlow(testYear);\r\n//console.log(`shouldBeZero is ${shouldBeZero}`);\r\n\r\nconst y = new Date().getFullYear();\r\nconst nets = [];\r\nfor(let i=y; i<=testYear; i++){\r\n    nets[i-y]=netAfterCost(i);\r\n}\r\nconst totalNet = nets.reduce((previousValue, currentValue)=>{\r\n    return previousValue + currentValue;\r\n})\r\n\r\nconsole.log(nets);\r\nconsole.log(`total net after all those years is ${totalNet}`);\r\n\r\nincome1 = yearlyHouseSalary(testYear);\r\nconsole.log(`Income 1 is ${income1}`);\r\n\r\nkidCost1 = returnAnnualKidCost(testYear);\r\nconsole.log(`Kid cost 1 is ${kidCost1}`);\r\n\r\nregCost1 = regSpending(testYear, monthlyDisc, monthlyGroc, monthlyRetir);\r\nconsole.log(`Reg cost 1 is ${regCost1}`);\r\n\r\nhouseCost1 = returnAnnualHousingCost(testYear);\r\nconsole.log(`House cost 1 is ${houseCost1}`);\r\n\r\nhousePurchaseCashFlow1 = findHousePurchaseYearCashFlow(testYear);\r\nconsole.log(`HPCF1 is ${housePurchaseCashFlow1}`);"]}